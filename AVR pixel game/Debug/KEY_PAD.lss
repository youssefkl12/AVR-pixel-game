
KEY_PAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  000028ea  0000295e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001f08  00000000  00000000  000029a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ca6  00000000  00000000  000048ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005552  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005692  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005802  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000744b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008336  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000090e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009244  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000094d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009c9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 3d 12 	call	0x247a	; 0x247a <main>
      7a:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a2 e7       	ldi	r26, 0x72	; 114
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	82 e7       	ldi	r24, 0x72	; 114
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_VidSetPinDir>:
#include"DIO_int.h"

/********************************************************************
//this is to control single pins
//set dio pin direction*/
void DIO_VidSetPinDir(u8 copy_u8Port,u8 copy_u8Pin,u8 copy_u8Direction){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8Direction==Output){
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	09 f0       	breq	.+2      	; 0xb58 <DIO_VidSetPinDir+0x22>
     b56:	6f c0       	rjmp	.+222    	; 0xc36 <DIO_VidSetPinDir+0x100>
		switch(copy_u8Port){
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	3f 83       	std	Y+7, r19	; 0x07
     b60:	2e 83       	std	Y+6, r18	; 0x06
     b62:	8e 81       	ldd	r24, Y+6	; 0x06
     b64:	9f 81       	ldd	r25, Y+7	; 0x07
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	91 05       	cpc	r25, r1
     b6a:	49 f1       	breq	.+82     	; 0xbbe <DIO_VidSetPinDir+0x88>
     b6c:	2e 81       	ldd	r18, Y+6	; 0x06
     b6e:	3f 81       	ldd	r19, Y+7	; 0x07
     b70:	22 30       	cpi	r18, 0x02	; 2
     b72:	31 05       	cpc	r19, r1
     b74:	2c f4       	brge	.+10     	; 0xb80 <DIO_VidSetPinDir+0x4a>
     b76:	8e 81       	ldd	r24, Y+6	; 0x06
     b78:	9f 81       	ldd	r25, Y+7	; 0x07
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	61 f0       	breq	.+24     	; 0xb96 <DIO_VidSetPinDir+0x60>
     b7e:	d2 c0       	rjmp	.+420    	; 0xd24 <DIO_VidSetPinDir+0x1ee>
     b80:	2e 81       	ldd	r18, Y+6	; 0x06
     b82:	3f 81       	ldd	r19, Y+7	; 0x07
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	71 f1       	breq	.+92     	; 0xbe6 <DIO_VidSetPinDir+0xb0>
     b8a:	8e 81       	ldd	r24, Y+6	; 0x06
     b8c:	9f 81       	ldd	r25, Y+7	; 0x07
     b8e:	83 30       	cpi	r24, 0x03	; 3
     b90:	91 05       	cpc	r25, r1
     b92:	e9 f1       	breq	.+122    	; 0xc0e <DIO_VidSetPinDir+0xd8>
     b94:	c7 c0       	rjmp	.+398    	; 0xd24 <DIO_VidSetPinDir+0x1ee>
			case Port_A:
			SET_BIT(DDRA,copy_u8Pin);
     b96:	aa e3       	ldi	r26, 0x3A	; 58
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	ea e3       	ldi	r30, 0x3A	; 58
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	48 2f       	mov	r20, r24
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	28 2f       	mov	r18, r24
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	02 2e       	mov	r0, r18
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <DIO_VidSetPinDir+0x7e>
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	0a 94       	dec	r0
     bb6:	e2 f7       	brpl	.-8      	; 0xbb0 <DIO_VidSetPinDir+0x7a>
     bb8:	84 2b       	or	r24, r20
     bba:	8c 93       	st	X, r24
     bbc:	b3 c0       	rjmp	.+358    	; 0xd24 <DIO_VidSetPinDir+0x1ee>
			break;
			case Port_B:
			SET_BIT(DDRB,copy_u8Pin);
     bbe:	a7 e3       	ldi	r26, 0x37	; 55
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e7 e3       	ldi	r30, 0x37	; 55
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	48 2f       	mov	r20, r24
     bca:	8a 81       	ldd	r24, Y+2	; 0x02
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	02 2e       	mov	r0, r18
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <DIO_VidSetPinDir+0xa6>
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	0a 94       	dec	r0
     bde:	e2 f7       	brpl	.-8      	; 0xbd8 <DIO_VidSetPinDir+0xa2>
     be0:	84 2b       	or	r24, r20
     be2:	8c 93       	st	X, r24
     be4:	9f c0       	rjmp	.+318    	; 0xd24 <DIO_VidSetPinDir+0x1ee>
			break;
			
			case Port_C:
			SET_BIT(DDRC,copy_u8Pin);
     be6:	a4 e3       	ldi	r26, 0x34	; 52
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e4 e3       	ldi	r30, 0x34	; 52
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	48 2f       	mov	r20, r24
     bf2:	8a 81       	ldd	r24, Y+2	; 0x02
     bf4:	28 2f       	mov	r18, r24
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	02 2e       	mov	r0, r18
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <DIO_VidSetPinDir+0xce>
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	0a 94       	dec	r0
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <DIO_VidSetPinDir+0xca>
     c08:	84 2b       	or	r24, r20
     c0a:	8c 93       	st	X, r24
     c0c:	8b c0       	rjmp	.+278    	; 0xd24 <DIO_VidSetPinDir+0x1ee>
			break;
			
			case Port_D:
			SET_BIT(DDRD,copy_u8Pin);
     c0e:	a1 e3       	ldi	r26, 0x31	; 49
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e1 e3       	ldi	r30, 0x31	; 49
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	48 2f       	mov	r20, r24
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	02 2e       	mov	r0, r18
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <DIO_VidSetPinDir+0xf6>
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	0a 94       	dec	r0
     c2e:	e2 f7       	brpl	.-8      	; 0xc28 <DIO_VidSetPinDir+0xf2>
     c30:	84 2b       	or	r24, r20
     c32:	8c 93       	st	X, r24
     c34:	77 c0       	rjmp	.+238    	; 0xd24 <DIO_VidSetPinDir+0x1ee>
			break;
			
			
		}
		
	}else if(copy_u8Direction==Input){
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	88 23       	and	r24, r24
     c3a:	09 f0       	breq	.+2      	; 0xc3e <DIO_VidSetPinDir+0x108>
     c3c:	73 c0       	rjmp	.+230    	; 0xd24 <DIO_VidSetPinDir+0x1ee>
		
		switch(copy_u8Port){
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	3d 83       	std	Y+5, r19	; 0x05
     c46:	2c 83       	std	Y+4, r18	; 0x04
     c48:	8c 81       	ldd	r24, Y+4	; 0x04
     c4a:	9d 81       	ldd	r25, Y+5	; 0x05
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	91 05       	cpc	r25, r1
     c50:	59 f1       	breq	.+86     	; 0xca8 <DIO_VidSetPinDir+0x172>
     c52:	2c 81       	ldd	r18, Y+4	; 0x04
     c54:	3d 81       	ldd	r19, Y+5	; 0x05
     c56:	22 30       	cpi	r18, 0x02	; 2
     c58:	31 05       	cpc	r19, r1
     c5a:	2c f4       	brge	.+10     	; 0xc66 <DIO_VidSetPinDir+0x130>
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	9d 81       	ldd	r25, Y+5	; 0x05
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	69 f0       	breq	.+26     	; 0xc7e <DIO_VidSetPinDir+0x148>
     c64:	5f c0       	rjmp	.+190    	; 0xd24 <DIO_VidSetPinDir+0x1ee>
     c66:	2c 81       	ldd	r18, Y+4	; 0x04
     c68:	3d 81       	ldd	r19, Y+5	; 0x05
     c6a:	22 30       	cpi	r18, 0x02	; 2
     c6c:	31 05       	cpc	r19, r1
     c6e:	89 f1       	breq	.+98     	; 0xcd2 <DIO_VidSetPinDir+0x19c>
     c70:	8c 81       	ldd	r24, Y+4	; 0x04
     c72:	9d 81       	ldd	r25, Y+5	; 0x05
     c74:	83 30       	cpi	r24, 0x03	; 3
     c76:	91 05       	cpc	r25, r1
     c78:	09 f4       	brne	.+2      	; 0xc7c <DIO_VidSetPinDir+0x146>
     c7a:	40 c0       	rjmp	.+128    	; 0xcfc <DIO_VidSetPinDir+0x1c6>
     c7c:	53 c0       	rjmp	.+166    	; 0xd24 <DIO_VidSetPinDir+0x1ee>
			case Port_A:
			CLR_BIT(DDRA,copy_u8Pin);
     c7e:	aa e3       	ldi	r26, 0x3A	; 58
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	ea e3       	ldi	r30, 0x3A	; 58
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	48 2f       	mov	r20, r24
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 2e       	mov	r0, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <DIO_VidSetPinDir+0x166>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	0a 94       	dec	r0
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <DIO_VidSetPinDir+0x162>
     ca0:	80 95       	com	r24
     ca2:	84 23       	and	r24, r20
     ca4:	8c 93       	st	X, r24
     ca6:	3e c0       	rjmp	.+124    	; 0xd24 <DIO_VidSetPinDir+0x1ee>
			break;
			case Port_B:
			CLR_BIT(DDRB,copy_u8Pin);
     ca8:	a7 e3       	ldi	r26, 0x37	; 55
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e7 e3       	ldi	r30, 0x37	; 55
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	48 2f       	mov	r20, r24
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	02 2e       	mov	r0, r18
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <DIO_VidSetPinDir+0x190>
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	0a 94       	dec	r0
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <DIO_VidSetPinDir+0x18c>
     cca:	80 95       	com	r24
     ccc:	84 23       	and	r24, r20
     cce:	8c 93       	st	X, r24
     cd0:	29 c0       	rjmp	.+82     	; 0xd24 <DIO_VidSetPinDir+0x1ee>
			break;
			
			case Port_C:
			CLR_BIT(DDRC,copy_u8Pin);
     cd2:	a4 e3       	ldi	r26, 0x34	; 52
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e4 e3       	ldi	r30, 0x34	; 52
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	48 2f       	mov	r20, r24
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	02 2e       	mov	r0, r18
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <DIO_VidSetPinDir+0x1ba>
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	0a 94       	dec	r0
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <DIO_VidSetPinDir+0x1b6>
     cf4:	80 95       	com	r24
     cf6:	84 23       	and	r24, r20
     cf8:	8c 93       	st	X, r24
     cfa:	14 c0       	rjmp	.+40     	; 0xd24 <DIO_VidSetPinDir+0x1ee>
			break;
			
			case Port_D:
			CLR_BIT(DDRD,copy_u8Pin);
     cfc:	a1 e3       	ldi	r26, 0x31	; 49
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e1 e3       	ldi	r30, 0x31	; 49
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	48 2f       	mov	r20, r24
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 2e       	mov	r0, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <DIO_VidSetPinDir+0x1e4>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <DIO_VidSetPinDir+0x1e0>
     d1e:	80 95       	com	r24
     d20:	84 23       	and	r24, r20
     d22:	8c 93       	st	X, r24
		
		
		
	}
	
}
     d24:	27 96       	adiw	r28, 0x07	; 7
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <DIO_VidSetPinValue>:
/*set dio pin value for output*/
void DIO_VidSetPinValue(u8 copy_u8Port,u8 copy_u8Pin,u8 copy_u8Value){
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	27 97       	sbiw	r28, 0x07	; 7
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	6a 83       	std	Y+2, r22	; 0x02
     d4e:	4b 83       	std	Y+3, r20	; 0x03
	
		if(copy_u8Value==PinHigh){
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	88 23       	and	r24, r24
     d54:	09 f0       	breq	.+2      	; 0xd58 <DIO_VidSetPinValue+0x22>
     d56:	6f c0       	rjmp	.+222    	; 0xe36 <DIO_VidSetPinValue+0x100>
		switch(copy_u8Port){
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	3f 83       	std	Y+7, r19	; 0x07
     d60:	2e 83       	std	Y+6, r18	; 0x06
     d62:	8e 81       	ldd	r24, Y+6	; 0x06
     d64:	9f 81       	ldd	r25, Y+7	; 0x07
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	91 05       	cpc	r25, r1
     d6a:	49 f1       	breq	.+82     	; 0xdbe <DIO_VidSetPinValue+0x88>
     d6c:	2e 81       	ldd	r18, Y+6	; 0x06
     d6e:	3f 81       	ldd	r19, Y+7	; 0x07
     d70:	22 30       	cpi	r18, 0x02	; 2
     d72:	31 05       	cpc	r19, r1
     d74:	2c f4       	brge	.+10     	; 0xd80 <DIO_VidSetPinValue+0x4a>
     d76:	8e 81       	ldd	r24, Y+6	; 0x06
     d78:	9f 81       	ldd	r25, Y+7	; 0x07
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	61 f0       	breq	.+24     	; 0xd96 <DIO_VidSetPinValue+0x60>
     d7e:	d2 c0       	rjmp	.+420    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
     d80:	2e 81       	ldd	r18, Y+6	; 0x06
     d82:	3f 81       	ldd	r19, Y+7	; 0x07
     d84:	22 30       	cpi	r18, 0x02	; 2
     d86:	31 05       	cpc	r19, r1
     d88:	71 f1       	breq	.+92     	; 0xde6 <DIO_VidSetPinValue+0xb0>
     d8a:	8e 81       	ldd	r24, Y+6	; 0x06
     d8c:	9f 81       	ldd	r25, Y+7	; 0x07
     d8e:	83 30       	cpi	r24, 0x03	; 3
     d90:	91 05       	cpc	r25, r1
     d92:	e9 f1       	breq	.+122    	; 0xe0e <DIO_VidSetPinValue+0xd8>
     d94:	c7 c0       	rjmp	.+398    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
			case Port_A:
			SET_BIT(PORTA,copy_u8Pin);
     d96:	ab e3       	ldi	r26, 0x3B	; 59
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	eb e3       	ldi	r30, 0x3B	; 59
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DIO_VidSetPinValue+0x7e>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <DIO_VidSetPinValue+0x7a>
     db8:	84 2b       	or	r24, r20
     dba:	8c 93       	st	X, r24
     dbc:	b3 c0       	rjmp	.+358    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
			break;
			case Port_B:
			SET_BIT(PORTB,copy_u8Pin);
     dbe:	a8 e3       	ldi	r26, 0x38	; 56
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e8 e3       	ldi	r30, 0x38	; 56
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <DIO_VidSetPinValue+0xa6>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <DIO_VidSetPinValue+0xa2>
     de0:	84 2b       	or	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	9f c0       	rjmp	.+318    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
			break;
			
			case Port_C:
			SET_BIT(PORTC,copy_u8Pin);
     de6:	a5 e3       	ldi	r26, 0x35	; 53
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e5 e3       	ldi	r30, 0x35	; 53
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_VidSetPinValue+0xce>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_VidSetPinValue+0xca>
     e08:	84 2b       	or	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	8b c0       	rjmp	.+278    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
			break;
			
			case Port_D:
			SET_BIT(PORTD,copy_u8Pin);
     e0e:	a2 e3       	ldi	r26, 0x32	; 50
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e2 e3       	ldi	r30, 0x32	; 50
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_VidSetPinValue+0xf6>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_VidSetPinValue+0xf2>
     e30:	84 2b       	or	r24, r20
     e32:	8c 93       	st	X, r24
     e34:	77 c0       	rjmp	.+238    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
			break;
			
			
		}
		
	}else if(copy_u8Value==PinLow){
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	09 f0       	breq	.+2      	; 0xe3e <DIO_VidSetPinValue+0x108>
     e3c:	73 c0       	rjmp	.+230    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
		
		switch(copy_u8Port){
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	3d 83       	std	Y+5, r19	; 0x05
     e46:	2c 83       	std	Y+4, r18	; 0x04
     e48:	8c 81       	ldd	r24, Y+4	; 0x04
     e4a:	9d 81       	ldd	r25, Y+5	; 0x05
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	91 05       	cpc	r25, r1
     e50:	59 f1       	breq	.+86     	; 0xea8 <DIO_VidSetPinValue+0x172>
     e52:	2c 81       	ldd	r18, Y+4	; 0x04
     e54:	3d 81       	ldd	r19, Y+5	; 0x05
     e56:	22 30       	cpi	r18, 0x02	; 2
     e58:	31 05       	cpc	r19, r1
     e5a:	2c f4       	brge	.+10     	; 0xe66 <DIO_VidSetPinValue+0x130>
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	9d 81       	ldd	r25, Y+5	; 0x05
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	69 f0       	breq	.+26     	; 0xe7e <DIO_VidSetPinValue+0x148>
     e64:	5f c0       	rjmp	.+190    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
     e66:	2c 81       	ldd	r18, Y+4	; 0x04
     e68:	3d 81       	ldd	r19, Y+5	; 0x05
     e6a:	22 30       	cpi	r18, 0x02	; 2
     e6c:	31 05       	cpc	r19, r1
     e6e:	89 f1       	breq	.+98     	; 0xed2 <DIO_VidSetPinValue+0x19c>
     e70:	8c 81       	ldd	r24, Y+4	; 0x04
     e72:	9d 81       	ldd	r25, Y+5	; 0x05
     e74:	83 30       	cpi	r24, 0x03	; 3
     e76:	91 05       	cpc	r25, r1
     e78:	09 f4       	brne	.+2      	; 0xe7c <DIO_VidSetPinValue+0x146>
     e7a:	40 c0       	rjmp	.+128    	; 0xefc <DIO_VidSetPinValue+0x1c6>
     e7c:	53 c0       	rjmp	.+166    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
			case Port_A:
			CLR_BIT(PORTA,copy_u8Pin);
     e7e:	ab e3       	ldi	r26, 0x3B	; 59
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	eb e3       	ldi	r30, 0x3B	; 59
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_VidSetPinValue+0x166>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_VidSetPinValue+0x162>
     ea0:	80 95       	com	r24
     ea2:	84 23       	and	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	3e c0       	rjmp	.+124    	; 0xf24 <DIO_VidSetPinValue+0x1ee>
			break;
			case Port_B:
			CLR_BIT(PORTB,copy_u8Pin);
     ea8:	a8 e3       	ldi	r26, 0x38	; 56
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e8 e3       	ldi	r30, 0x38	; 56
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <DIO_VidSetPinValue+0x190>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <DIO_VidSetPinValue+0x18c>
     eca:	80 95       	com	r24
     ecc:	84 23       	and	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	29 c0       	rjmp	.+82     	; 0xf24 <DIO_VidSetPinValue+0x1ee>
			break;
			
			case Port_C:
			CLR_BIT(PORTC,copy_u8Pin);
     ed2:	a5 e3       	ldi	r26, 0x35	; 53
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e5 e3       	ldi	r30, 0x35	; 53
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 2e       	mov	r0, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <DIO_VidSetPinValue+0x1ba>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <DIO_VidSetPinValue+0x1b6>
     ef4:	80 95       	com	r24
     ef6:	84 23       	and	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	14 c0       	rjmp	.+40     	; 0xf24 <DIO_VidSetPinValue+0x1ee>
			break;
			
			case Port_D:
			CLR_BIT(PORTD,copy_u8Pin);
     efc:	a2 e3       	ldi	r26, 0x32	; 50
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e2 e3       	ldi	r30, 0x32	; 50
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_VidSetPinValue+0x1e4>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_VidSetPinValue+0x1e0>
     f1e:	80 95       	com	r24
     f20:	84 23       	and	r24, r20
     f22:	8c 93       	st	X, r24
		
		
		
	}
	
}
     f24:	27 96       	adiw	r28, 0x07	; 7
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <DIO_VidSetPinValueToggel>:
/*toggel bit*/
void DIO_VidSetPinValueToggel(u8 copy_u8Port,u8 copy_u8Pin){
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <DIO_VidSetPinValueToggel+0x6>
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <DIO_VidSetPinValueToggel+0x8>
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	89 83       	std	Y+1, r24	; 0x01
     f44:	6a 83       	std	Y+2, r22	; 0x02

	switch(copy_u8Port){
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	3c 83       	std	Y+4, r19	; 0x04
     f4e:	2b 83       	std	Y+3, r18	; 0x03
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	9c 81       	ldd	r25, Y+4	; 0x04
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	91 05       	cpc	r25, r1
     f58:	49 f1       	breq	.+82     	; 0xfac <DIO_VidSetPinValueToggel+0x76>
     f5a:	2b 81       	ldd	r18, Y+3	; 0x03
     f5c:	3c 81       	ldd	r19, Y+4	; 0x04
     f5e:	22 30       	cpi	r18, 0x02	; 2
     f60:	31 05       	cpc	r19, r1
     f62:	2c f4       	brge	.+10     	; 0xf6e <DIO_VidSetPinValueToggel+0x38>
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	9c 81       	ldd	r25, Y+4	; 0x04
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	61 f0       	breq	.+24     	; 0xf84 <DIO_VidSetPinValueToggel+0x4e>
     f6c:	5a c0       	rjmp	.+180    	; 0x1022 <DIO_VidSetPinValueToggel+0xec>
     f6e:	2b 81       	ldd	r18, Y+3	; 0x03
     f70:	3c 81       	ldd	r19, Y+4	; 0x04
     f72:	22 30       	cpi	r18, 0x02	; 2
     f74:	31 05       	cpc	r19, r1
     f76:	71 f1       	breq	.+92     	; 0xfd4 <DIO_VidSetPinValueToggel+0x9e>
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	9c 81       	ldd	r25, Y+4	; 0x04
     f7c:	83 30       	cpi	r24, 0x03	; 3
     f7e:	91 05       	cpc	r25, r1
     f80:	e9 f1       	breq	.+122    	; 0xffc <DIO_VidSetPinValueToggel+0xc6>
     f82:	4f c0       	rjmp	.+158    	; 0x1022 <DIO_VidSetPinValueToggel+0xec>
				case Port_A:
				Toggel_Bit(PORTA,copy_u8Pin);
     f84:	ab e3       	ldi	r26, 0x3B	; 59
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	eb e3       	ldi	r30, 0x3B	; 59
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 2e       	mov	r0, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <DIO_VidSetPinValueToggel+0x6c>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <DIO_VidSetPinValueToggel+0x68>
     fa6:	84 27       	eor	r24, r20
     fa8:	8c 93       	st	X, r24
     faa:	3b c0       	rjmp	.+118    	; 0x1022 <DIO_VidSetPinValueToggel+0xec>
				break;
				case Port_B:
				Toggel_Bit(PORTB,copy_u8Pin);
     fac:	a8 e3       	ldi	r26, 0x38	; 56
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e8 e3       	ldi	r30, 0x38	; 56
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	48 2f       	mov	r20, r24
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 2e       	mov	r0, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <DIO_VidSetPinValueToggel+0x94>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <DIO_VidSetPinValueToggel+0x90>
     fce:	84 27       	eor	r24, r20
     fd0:	8c 93       	st	X, r24
     fd2:	27 c0       	rjmp	.+78     	; 0x1022 <DIO_VidSetPinValueToggel+0xec>
				break;

				case Port_C:
				Toggel_Bit(PORTC,copy_u8Pin);
     fd4:	a5 e3       	ldi	r26, 0x35	; 53
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e5 e3       	ldi	r30, 0x35	; 53
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 2e       	mov	r0, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO_VidSetPinValueToggel+0xbc>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <DIO_VidSetPinValueToggel+0xb8>
     ff6:	84 27       	eor	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	13 c0       	rjmp	.+38     	; 0x1022 <DIO_VidSetPinValueToggel+0xec>
				break;

				case Port_D:
				Toggel_Bit(PORTD,copy_u8Pin);
     ffc:	a2 e3       	ldi	r26, 0x32	; 50
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e2 e3       	ldi	r30, 0x32	; 50
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <DIO_VidSetPinValueToggel+0xe4>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <DIO_VidSetPinValueToggel+0xe0>
    101e:	84 27       	eor	r24, r20
    1020:	8c 93       	st	X, r24
				break;


			}
}
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <DIO_VidGetPinValue>:
/*get pin value*/
void DIO_VidGetPinValue(u8 copy_u8Port,u8 copy_u8Pin,u8* pu8Value){
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <DIO_VidGetPinValue+0x6>
    1036:	00 d0       	rcall	.+0      	; 0x1038 <DIO_VidGetPinValue+0x8>
    1038:	00 d0       	rcall	.+0      	; 0x103a <DIO_VidGetPinValue+0xa>
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	6a 83       	std	Y+2, r22	; 0x02
    1042:	5c 83       	std	Y+4, r21	; 0x04
    1044:	4b 83       	std	Y+3, r20	; 0x03
	
	switch(copy_u8Port){
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	3e 83       	std	Y+6, r19	; 0x06
    104e:	2d 83       	std	Y+5, r18	; 0x05
    1050:	4d 81       	ldd	r20, Y+5	; 0x05
    1052:	5e 81       	ldd	r21, Y+6	; 0x06
    1054:	41 30       	cpi	r20, 0x01	; 1
    1056:	51 05       	cpc	r21, r1
    1058:	59 f1       	breq	.+86     	; 0x10b0 <DIO_VidGetPinValue+0x80>
    105a:	8d 81       	ldd	r24, Y+5	; 0x05
    105c:	9e 81       	ldd	r25, Y+6	; 0x06
    105e:	82 30       	cpi	r24, 0x02	; 2
    1060:	91 05       	cpc	r25, r1
    1062:	34 f4       	brge	.+12     	; 0x1070 <DIO_VidGetPinValue+0x40>
    1064:	2d 81       	ldd	r18, Y+5	; 0x05
    1066:	3e 81       	ldd	r19, Y+6	; 0x06
    1068:	21 15       	cp	r18, r1
    106a:	31 05       	cpc	r19, r1
    106c:	69 f0       	breq	.+26     	; 0x1088 <DIO_VidGetPinValue+0x58>
    106e:	5b c0       	rjmp	.+182    	; 0x1126 <DIO_VidGetPinValue+0xf6>
    1070:	4d 81       	ldd	r20, Y+5	; 0x05
    1072:	5e 81       	ldd	r21, Y+6	; 0x06
    1074:	42 30       	cpi	r20, 0x02	; 2
    1076:	51 05       	cpc	r21, r1
    1078:	79 f1       	breq	.+94     	; 0x10d8 <DIO_VidGetPinValue+0xa8>
    107a:	8d 81       	ldd	r24, Y+5	; 0x05
    107c:	9e 81       	ldd	r25, Y+6	; 0x06
    107e:	83 30       	cpi	r24, 0x03	; 3
    1080:	91 05       	cpc	r25, r1
    1082:	09 f4       	brne	.+2      	; 0x1086 <DIO_VidGetPinValue+0x56>
    1084:	3d c0       	rjmp	.+122    	; 0x1100 <DIO_VidGetPinValue+0xd0>
    1086:	4f c0       	rjmp	.+158    	; 0x1126 <DIO_VidGetPinValue+0xf6>
			case Port_A:
		*pu8Value=GET_BIT(PINA,copy_u8Pin);
    1088:	e9 e3       	ldi	r30, 0x39	; 57
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	88 2f       	mov	r24, r24
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	a9 01       	movw	r20, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_VidGetPinValue+0x70>
    109c:	55 95       	asr	r21
    109e:	47 95       	ror	r20
    10a0:	8a 95       	dec	r24
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_VidGetPinValue+0x6c>
    10a4:	ca 01       	movw	r24, r20
    10a6:	81 70       	andi	r24, 0x01	; 1
    10a8:	eb 81       	ldd	r30, Y+3	; 0x03
    10aa:	fc 81       	ldd	r31, Y+4	; 0x04
    10ac:	80 83       	st	Z, r24
    10ae:	3b c0       	rjmp	.+118    	; 0x1126 <DIO_VidGetPinValue+0xf6>
			break;
			case Port_B:
			*pu8Value=GET_BIT(PINB,copy_u8Pin);
    10b0:	e6 e3       	ldi	r30, 0x36	; 54
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	a9 01       	movw	r20, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_VidGetPinValue+0x98>
    10c4:	55 95       	asr	r21
    10c6:	47 95       	ror	r20
    10c8:	8a 95       	dec	r24
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_VidGetPinValue+0x94>
    10cc:	ca 01       	movw	r24, r20
    10ce:	81 70       	andi	r24, 0x01	; 1
    10d0:	eb 81       	ldd	r30, Y+3	; 0x03
    10d2:	fc 81       	ldd	r31, Y+4	; 0x04
    10d4:	80 83       	st	Z, r24
    10d6:	27 c0       	rjmp	.+78     	; 0x1126 <DIO_VidGetPinValue+0xf6>
			break;
			
			case Port_C:
			*pu8Value=GET_BIT(PINC,copy_u8Pin);
    10d8:	e3 e3       	ldi	r30, 0x33	; 51
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	a9 01       	movw	r20, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <DIO_VidGetPinValue+0xc0>
    10ec:	55 95       	asr	r21
    10ee:	47 95       	ror	r20
    10f0:	8a 95       	dec	r24
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <DIO_VidGetPinValue+0xbc>
    10f4:	ca 01       	movw	r24, r20
    10f6:	81 70       	andi	r24, 0x01	; 1
    10f8:	eb 81       	ldd	r30, Y+3	; 0x03
    10fa:	fc 81       	ldd	r31, Y+4	; 0x04
    10fc:	80 83       	st	Z, r24
    10fe:	13 c0       	rjmp	.+38     	; 0x1126 <DIO_VidGetPinValue+0xf6>
			break;
			
			case Port_D:
			*pu8Value=GET_BIT(PIND,copy_u8Pin);
    1100:	e0 e3       	ldi	r30, 0x30	; 48
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a9 01       	movw	r20, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <DIO_VidGetPinValue+0xe8>
    1114:	55 95       	asr	r21
    1116:	47 95       	ror	r20
    1118:	8a 95       	dec	r24
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <DIO_VidGetPinValue+0xe4>
    111c:	ca 01       	movw	r24, r20
    111e:	81 70       	andi	r24, 0x01	; 1
    1120:	eb 81       	ldd	r30, Y+3	; 0x03
    1122:	fc 81       	ldd	r31, Y+4	; 0x04
    1124:	80 83       	st	Z, r24
			break;
			
			
		}
	
}
    1126:	26 96       	adiw	r28, 0x06	; 6
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <DIO_VidSetPortDir>:


//********************************************************************
//this is to control sa whole port
/*set dio Port direction*/
void DIO_VidSetPortDir(u8 copy_u8Port,u8 copy_u8Direction){
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <DIO_VidSetPortDir+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <DIO_VidSetPortDir+0x8>
    1140:	00 d0       	rcall	.+0      	; 0x1142 <DIO_VidSetPortDir+0xa>
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	6a 83       	std	Y+2, r22	; 0x02
	
		if(copy_u8Direction==Output){
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	09 f0       	breq	.+2      	; 0x1152 <DIO_VidSetPortDir+0x1a>
    1150:	06 c1       	rjmp	.+524    	; 0x135e <DIO_VidSetPortDir+0x226>
		switch(copy_u8Port){
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	3e 83       	std	Y+6, r19	; 0x06
    115a:	2d 83       	std	Y+5, r18	; 0x05
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	91 05       	cpc	r25, r1
    1164:	09 f4       	brne	.+2      	; 0x1168 <DIO_VidSetPortDir+0x30>
    1166:	50 c0       	rjmp	.+160    	; 0x1208 <DIO_VidSetPortDir+0xd0>
    1168:	2d 81       	ldd	r18, Y+5	; 0x05
    116a:	3e 81       	ldd	r19, Y+6	; 0x06
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	2c f4       	brge	.+10     	; 0x117c <DIO_VidSetPortDir+0x44>
    1172:	8d 81       	ldd	r24, Y+5	; 0x05
    1174:	9e 81       	ldd	r25, Y+6	; 0x06
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	71 f0       	breq	.+28     	; 0x1196 <DIO_VidSetPortDir+0x5e>
    117a:	fa c1       	rjmp	.+1012   	; 0x1570 <DIO_VidSetPortDir+0x438>
    117c:	2d 81       	ldd	r18, Y+5	; 0x05
    117e:	3e 81       	ldd	r19, Y+6	; 0x06
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	09 f4       	brne	.+2      	; 0x1188 <DIO_VidSetPortDir+0x50>
    1186:	79 c0       	rjmp	.+242    	; 0x127a <DIO_VidSetPortDir+0x142>
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	83 30       	cpi	r24, 0x03	; 3
    118e:	91 05       	cpc	r25, r1
    1190:	09 f4       	brne	.+2      	; 0x1194 <DIO_VidSetPortDir+0x5c>
    1192:	ac c0       	rjmp	.+344    	; 0x12ec <DIO_VidSetPortDir+0x1b4>
    1194:	ed c1       	rjmp	.+986    	; 0x1570 <DIO_VidSetPortDir+0x438>
			case Port_A:
			SET_BIT(DDRA,0);
    1196:	aa e3       	ldi	r26, 0x3A	; 58
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	ea e3       	ldi	r30, 0x3A	; 58
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	81 60       	ori	r24, 0x01	; 1
    11a2:	8c 93       	st	X, r24
			SET_BIT(DDRA,1);
    11a4:	aa e3       	ldi	r26, 0x3A	; 58
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	ea e3       	ldi	r30, 0x3A	; 58
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	82 60       	ori	r24, 0x02	; 2
    11b0:	8c 93       	st	X, r24
			SET_BIT(DDRA,2);
    11b2:	aa e3       	ldi	r26, 0x3A	; 58
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	ea e3       	ldi	r30, 0x3A	; 58
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	84 60       	ori	r24, 0x04	; 4
    11be:	8c 93       	st	X, r24
			SET_BIT(DDRA,3);
    11c0:	aa e3       	ldi	r26, 0x3A	; 58
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	ea e3       	ldi	r30, 0x3A	; 58
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	88 60       	ori	r24, 0x08	; 8
    11cc:	8c 93       	st	X, r24
			SET_BIT(DDRA,4);
    11ce:	aa e3       	ldi	r26, 0x3A	; 58
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	ea e3       	ldi	r30, 0x3A	; 58
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	80 61       	ori	r24, 0x10	; 16
    11da:	8c 93       	st	X, r24
			SET_BIT(DDRA,5);
    11dc:	aa e3       	ldi	r26, 0x3A	; 58
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	ea e3       	ldi	r30, 0x3A	; 58
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	80 62       	ori	r24, 0x20	; 32
    11e8:	8c 93       	st	X, r24
			SET_BIT(DDRA,6);
    11ea:	aa e3       	ldi	r26, 0x3A	; 58
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	ea e3       	ldi	r30, 0x3A	; 58
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	80 64       	ori	r24, 0x40	; 64
    11f6:	8c 93       	st	X, r24
			SET_BIT(DDRA,7);
    11f8:	aa e3       	ldi	r26, 0x3A	; 58
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	ea e3       	ldi	r30, 0x3A	; 58
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	80 68       	ori	r24, 0x80	; 128
    1204:	8c 93       	st	X, r24
    1206:	b4 c1       	rjmp	.+872    	; 0x1570 <DIO_VidSetPortDir+0x438>
			break;
			case Port_B:
			SET_BIT(DDRB,0);
    1208:	a7 e3       	ldi	r26, 0x37	; 55
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e7 e3       	ldi	r30, 0x37	; 55
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	81 60       	ori	r24, 0x01	; 1
    1214:	8c 93       	st	X, r24
			SET_BIT(DDRB,1);
    1216:	a7 e3       	ldi	r26, 0x37	; 55
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e7 e3       	ldi	r30, 0x37	; 55
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	82 60       	ori	r24, 0x02	; 2
    1222:	8c 93       	st	X, r24
			SET_BIT(DDRB,2);
    1224:	a7 e3       	ldi	r26, 0x37	; 55
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e7 e3       	ldi	r30, 0x37	; 55
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	84 60       	ori	r24, 0x04	; 4
    1230:	8c 93       	st	X, r24
			SET_BIT(DDRB,3);
    1232:	a7 e3       	ldi	r26, 0x37	; 55
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e7 e3       	ldi	r30, 0x37	; 55
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	88 60       	ori	r24, 0x08	; 8
    123e:	8c 93       	st	X, r24
			SET_BIT(DDRB,4);
    1240:	a7 e3       	ldi	r26, 0x37	; 55
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e7 e3       	ldi	r30, 0x37	; 55
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	80 61       	ori	r24, 0x10	; 16
    124c:	8c 93       	st	X, r24
			SET_BIT(DDRB,5);
    124e:	a7 e3       	ldi	r26, 0x37	; 55
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e7 e3       	ldi	r30, 0x37	; 55
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	80 62       	ori	r24, 0x20	; 32
    125a:	8c 93       	st	X, r24
			SET_BIT(DDRB,6);
    125c:	a7 e3       	ldi	r26, 0x37	; 55
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e7 e3       	ldi	r30, 0x37	; 55
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	80 64       	ori	r24, 0x40	; 64
    1268:	8c 93       	st	X, r24
			SET_BIT(DDRB,7);
    126a:	a7 e3       	ldi	r26, 0x37	; 55
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e7 e3       	ldi	r30, 0x37	; 55
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	80 68       	ori	r24, 0x80	; 128
    1276:	8c 93       	st	X, r24
    1278:	7b c1       	rjmp	.+758    	; 0x1570 <DIO_VidSetPortDir+0x438>
			break;
			
			case Port_C:
			SET_BIT(DDRC,0);
    127a:	a4 e3       	ldi	r26, 0x34	; 52
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e4 e3       	ldi	r30, 0x34	; 52
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	81 60       	ori	r24, 0x01	; 1
    1286:	8c 93       	st	X, r24
			SET_BIT(DDRC,1);
    1288:	a4 e3       	ldi	r26, 0x34	; 52
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e4 e3       	ldi	r30, 0x34	; 52
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	82 60       	ori	r24, 0x02	; 2
    1294:	8c 93       	st	X, r24
			SET_BIT(DDRC,2);
    1296:	a4 e3       	ldi	r26, 0x34	; 52
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e4 e3       	ldi	r30, 0x34	; 52
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	84 60       	ori	r24, 0x04	; 4
    12a2:	8c 93       	st	X, r24
			SET_BIT(DDRC,3);
    12a4:	a4 e3       	ldi	r26, 0x34	; 52
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e4 e3       	ldi	r30, 0x34	; 52
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	88 60       	ori	r24, 0x08	; 8
    12b0:	8c 93       	st	X, r24
			SET_BIT(DDRC,4);
    12b2:	a4 e3       	ldi	r26, 0x34	; 52
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e4 e3       	ldi	r30, 0x34	; 52
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	80 61       	ori	r24, 0x10	; 16
    12be:	8c 93       	st	X, r24
			SET_BIT(DDRC,5);
    12c0:	a4 e3       	ldi	r26, 0x34	; 52
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e4 e3       	ldi	r30, 0x34	; 52
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	80 62       	ori	r24, 0x20	; 32
    12cc:	8c 93       	st	X, r24
			SET_BIT(DDRC,6);
    12ce:	a4 e3       	ldi	r26, 0x34	; 52
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e4 e3       	ldi	r30, 0x34	; 52
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	80 64       	ori	r24, 0x40	; 64
    12da:	8c 93       	st	X, r24
			SET_BIT(DDRC,7);
    12dc:	a4 e3       	ldi	r26, 0x34	; 52
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e4 e3       	ldi	r30, 0x34	; 52
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	80 68       	ori	r24, 0x80	; 128
    12e8:	8c 93       	st	X, r24
    12ea:	42 c1       	rjmp	.+644    	; 0x1570 <DIO_VidSetPortDir+0x438>
			break;
			
			case Port_D:
			SET_BIT(DDRD,0);
    12ec:	a1 e3       	ldi	r26, 0x31	; 49
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e1 e3       	ldi	r30, 0x31	; 49
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	81 60       	ori	r24, 0x01	; 1
    12f8:	8c 93       	st	X, r24
			SET_BIT(DDRD,1);
    12fa:	a1 e3       	ldi	r26, 0x31	; 49
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e1 e3       	ldi	r30, 0x31	; 49
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	82 60       	ori	r24, 0x02	; 2
    1306:	8c 93       	st	X, r24
			SET_BIT(DDRD,2);
    1308:	a1 e3       	ldi	r26, 0x31	; 49
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e1 e3       	ldi	r30, 0x31	; 49
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	84 60       	ori	r24, 0x04	; 4
    1314:	8c 93       	st	X, r24
			SET_BIT(DDRD,3);
    1316:	a1 e3       	ldi	r26, 0x31	; 49
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e1 e3       	ldi	r30, 0x31	; 49
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	88 60       	ori	r24, 0x08	; 8
    1322:	8c 93       	st	X, r24
			SET_BIT(DDRD,4);
    1324:	a1 e3       	ldi	r26, 0x31	; 49
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e1 e3       	ldi	r30, 0x31	; 49
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	80 61       	ori	r24, 0x10	; 16
    1330:	8c 93       	st	X, r24
			SET_BIT(DDRD,5);
    1332:	a1 e3       	ldi	r26, 0x31	; 49
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e1 e3       	ldi	r30, 0x31	; 49
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	80 62       	ori	r24, 0x20	; 32
    133e:	8c 93       	st	X, r24
			SET_BIT(DDRD,6);
    1340:	a1 e3       	ldi	r26, 0x31	; 49
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e1 e3       	ldi	r30, 0x31	; 49
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	80 64       	ori	r24, 0x40	; 64
    134c:	8c 93       	st	X, r24
			SET_BIT(DDRD,7);
    134e:	a1 e3       	ldi	r26, 0x31	; 49
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e1 e3       	ldi	r30, 0x31	; 49
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	80 68       	ori	r24, 0x80	; 128
    135a:	8c 93       	st	X, r24
    135c:	09 c1       	rjmp	.+530    	; 0x1570 <DIO_VidSetPortDir+0x438>
			break;
			
			
		}
		
	}else if(copy_u8Direction==Input){
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	88 23       	and	r24, r24
    1362:	09 f0       	breq	.+2      	; 0x1366 <DIO_VidSetPortDir+0x22e>
    1364:	05 c1       	rjmp	.+522    	; 0x1570 <DIO_VidSetPortDir+0x438>
		
		switch(copy_u8Port){
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	3c 83       	std	Y+4, r19	; 0x04
    136e:	2b 83       	std	Y+3, r18	; 0x03
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	91 05       	cpc	r25, r1
    1378:	09 f4       	brne	.+2      	; 0x137c <DIO_VidSetPortDir+0x244>
    137a:	50 c0       	rjmp	.+160    	; 0x141c <DIO_VidSetPortDir+0x2e4>
    137c:	2b 81       	ldd	r18, Y+3	; 0x03
    137e:	3c 81       	ldd	r19, Y+4	; 0x04
    1380:	22 30       	cpi	r18, 0x02	; 2
    1382:	31 05       	cpc	r19, r1
    1384:	2c f4       	brge	.+10     	; 0x1390 <DIO_VidSetPortDir+0x258>
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	71 f0       	breq	.+28     	; 0x13aa <DIO_VidSetPortDir+0x272>
    138e:	f0 c0       	rjmp	.+480    	; 0x1570 <DIO_VidSetPortDir+0x438>
    1390:	2b 81       	ldd	r18, Y+3	; 0x03
    1392:	3c 81       	ldd	r19, Y+4	; 0x04
    1394:	22 30       	cpi	r18, 0x02	; 2
    1396:	31 05       	cpc	r19, r1
    1398:	09 f4       	brne	.+2      	; 0x139c <DIO_VidSetPortDir+0x264>
    139a:	79 c0       	rjmp	.+242    	; 0x148e <DIO_VidSetPortDir+0x356>
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	83 30       	cpi	r24, 0x03	; 3
    13a2:	91 05       	cpc	r25, r1
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <DIO_VidSetPortDir+0x270>
    13a6:	ac c0       	rjmp	.+344    	; 0x1500 <DIO_VidSetPortDir+0x3c8>
    13a8:	e3 c0       	rjmp	.+454    	; 0x1570 <DIO_VidSetPortDir+0x438>
			case Port_A:
			CLR_BIT(DDRA,0);
    13aa:	aa e3       	ldi	r26, 0x3A	; 58
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	ea e3       	ldi	r30, 0x3A	; 58
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	8e 7f       	andi	r24, 0xFE	; 254
    13b6:	8c 93       	st	X, r24
			CLR_BIT(DDRA,1);
    13b8:	aa e3       	ldi	r26, 0x3A	; 58
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	ea e3       	ldi	r30, 0x3A	; 58
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8d 7f       	andi	r24, 0xFD	; 253
    13c4:	8c 93       	st	X, r24
			CLR_BIT(DDRA,2);
    13c6:	aa e3       	ldi	r26, 0x3A	; 58
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	ea e3       	ldi	r30, 0x3A	; 58
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	8b 7f       	andi	r24, 0xFB	; 251
    13d2:	8c 93       	st	X, r24
			CLR_BIT(DDRA,3);
    13d4:	aa e3       	ldi	r26, 0x3A	; 58
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	ea e3       	ldi	r30, 0x3A	; 58
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	87 7f       	andi	r24, 0xF7	; 247
    13e0:	8c 93       	st	X, r24
			CLR_BIT(DDRA,4);
    13e2:	aa e3       	ldi	r26, 0x3A	; 58
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	ea e3       	ldi	r30, 0x3A	; 58
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	8f 7e       	andi	r24, 0xEF	; 239
    13ee:	8c 93       	st	X, r24
			CLR_BIT(DDRA,5);
    13f0:	aa e3       	ldi	r26, 0x3A	; 58
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	ea e3       	ldi	r30, 0x3A	; 58
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	8f 7d       	andi	r24, 0xDF	; 223
    13fc:	8c 93       	st	X, r24
			CLR_BIT(DDRA,6);
    13fe:	aa e3       	ldi	r26, 0x3A	; 58
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	ea e3       	ldi	r30, 0x3A	; 58
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	8f 7b       	andi	r24, 0xBF	; 191
    140a:	8c 93       	st	X, r24
			CLR_BIT(DDRA,7);
    140c:	aa e3       	ldi	r26, 0x3A	; 58
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ea e3       	ldi	r30, 0x3A	; 58
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8f 77       	andi	r24, 0x7F	; 127
    1418:	8c 93       	st	X, r24
    141a:	aa c0       	rjmp	.+340    	; 0x1570 <DIO_VidSetPortDir+0x438>
			break;
			case Port_B:
            CLR_BIT(DDRB,0);
    141c:	a7 e3       	ldi	r26, 0x37	; 55
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e7 e3       	ldi	r30, 0x37	; 55
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	8e 7f       	andi	r24, 0xFE	; 254
    1428:	8c 93       	st	X, r24
			CLR_BIT(DDRB,1);
    142a:	a7 e3       	ldi	r26, 0x37	; 55
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e7 e3       	ldi	r30, 0x37	; 55
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	8d 7f       	andi	r24, 0xFD	; 253
    1436:	8c 93       	st	X, r24
			CLR_BIT(DDRB,2);
    1438:	a7 e3       	ldi	r26, 0x37	; 55
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e7 e3       	ldi	r30, 0x37	; 55
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8b 7f       	andi	r24, 0xFB	; 251
    1444:	8c 93       	st	X, r24
			CLR_BIT(DDRB,3);
    1446:	a7 e3       	ldi	r26, 0x37	; 55
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e7 e3       	ldi	r30, 0x37	; 55
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	87 7f       	andi	r24, 0xF7	; 247
    1452:	8c 93       	st	X, r24
			CLR_BIT(DDRB,4);
    1454:	a7 e3       	ldi	r26, 0x37	; 55
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e7 e3       	ldi	r30, 0x37	; 55
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	8f 7e       	andi	r24, 0xEF	; 239
    1460:	8c 93       	st	X, r24
			CLR_BIT(DDRB,5);
    1462:	a7 e3       	ldi	r26, 0x37	; 55
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e7 e3       	ldi	r30, 0x37	; 55
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	8f 7d       	andi	r24, 0xDF	; 223
    146e:	8c 93       	st	X, r24
			CLR_BIT(DDRB,6);
    1470:	a7 e3       	ldi	r26, 0x37	; 55
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e7 e3       	ldi	r30, 0x37	; 55
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	8f 7b       	andi	r24, 0xBF	; 191
    147c:	8c 93       	st	X, r24
			CLR_BIT(DDRB,7);
    147e:	a7 e3       	ldi	r26, 0x37	; 55
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e7 e3       	ldi	r30, 0x37	; 55
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	8f 77       	andi	r24, 0x7F	; 127
    148a:	8c 93       	st	X, r24
    148c:	71 c0       	rjmp	.+226    	; 0x1570 <DIO_VidSetPortDir+0x438>
			break;
			
			case Port_C:
            CLR_BIT(DDRC,0);
    148e:	a4 e3       	ldi	r26, 0x34	; 52
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e4 e3       	ldi	r30, 0x34	; 52
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	8e 7f       	andi	r24, 0xFE	; 254
    149a:	8c 93       	st	X, r24
			CLR_BIT(DDRC,1);
    149c:	a4 e3       	ldi	r26, 0x34	; 52
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e4 e3       	ldi	r30, 0x34	; 52
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8d 7f       	andi	r24, 0xFD	; 253
    14a8:	8c 93       	st	X, r24
			CLR_BIT(DDRC,2);
    14aa:	a4 e3       	ldi	r26, 0x34	; 52
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e4 e3       	ldi	r30, 0x34	; 52
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8b 7f       	andi	r24, 0xFB	; 251
    14b6:	8c 93       	st	X, r24
			CLR_BIT(DDRC,3);
    14b8:	a4 e3       	ldi	r26, 0x34	; 52
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e4 e3       	ldi	r30, 0x34	; 52
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	87 7f       	andi	r24, 0xF7	; 247
    14c4:	8c 93       	st	X, r24
			CLR_BIT(DDRC,4);
    14c6:	a4 e3       	ldi	r26, 0x34	; 52
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e4 e3       	ldi	r30, 0x34	; 52
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	8f 7e       	andi	r24, 0xEF	; 239
    14d2:	8c 93       	st	X, r24
			CLR_BIT(DDRC,5);
    14d4:	a4 e3       	ldi	r26, 0x34	; 52
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e4 e3       	ldi	r30, 0x34	; 52
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	8f 7d       	andi	r24, 0xDF	; 223
    14e0:	8c 93       	st	X, r24
			CLR_BIT(DDRC,6);
    14e2:	a4 e3       	ldi	r26, 0x34	; 52
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e4 e3       	ldi	r30, 0x34	; 52
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	8f 7b       	andi	r24, 0xBF	; 191
    14ee:	8c 93       	st	X, r24
			CLR_BIT(DDRC,7);			
    14f0:	a4 e3       	ldi	r26, 0x34	; 52
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	e4 e3       	ldi	r30, 0x34	; 52
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	8f 77       	andi	r24, 0x7F	; 127
    14fc:	8c 93       	st	X, r24
    14fe:	38 c0       	rjmp	.+112    	; 0x1570 <DIO_VidSetPortDir+0x438>
			break;
			
			case Port_D:
			CLR_BIT(DDRD,0);
    1500:	a1 e3       	ldi	r26, 0x31	; 49
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e1 e3       	ldi	r30, 0x31	; 49
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	8e 7f       	andi	r24, 0xFE	; 254
    150c:	8c 93       	st	X, r24
			CLR_BIT(DDRD,1);
    150e:	a1 e3       	ldi	r26, 0x31	; 49
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e1 e3       	ldi	r30, 0x31	; 49
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	8d 7f       	andi	r24, 0xFD	; 253
    151a:	8c 93       	st	X, r24
			CLR_BIT(DDRD,2);
    151c:	a1 e3       	ldi	r26, 0x31	; 49
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e1 e3       	ldi	r30, 0x31	; 49
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	8b 7f       	andi	r24, 0xFB	; 251
    1528:	8c 93       	st	X, r24
			CLR_BIT(DDRD,3);
    152a:	a1 e3       	ldi	r26, 0x31	; 49
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e1 e3       	ldi	r30, 0x31	; 49
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	87 7f       	andi	r24, 0xF7	; 247
    1536:	8c 93       	st	X, r24
			CLR_BIT(DDRD,4);
    1538:	a1 e3       	ldi	r26, 0x31	; 49
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e1 e3       	ldi	r30, 0x31	; 49
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	8f 7e       	andi	r24, 0xEF	; 239
    1544:	8c 93       	st	X, r24
			CLR_BIT(DDRD,5);
    1546:	a1 e3       	ldi	r26, 0x31	; 49
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e1 e3       	ldi	r30, 0x31	; 49
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	8f 7d       	andi	r24, 0xDF	; 223
    1552:	8c 93       	st	X, r24
			CLR_BIT(DDRD,6);
    1554:	a1 e3       	ldi	r26, 0x31	; 49
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e1 e3       	ldi	r30, 0x31	; 49
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8f 7b       	andi	r24, 0xBF	; 191
    1560:	8c 93       	st	X, r24
			CLR_BIT(DDRD,7);	
    1562:	a1 e3       	ldi	r26, 0x31	; 49
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e1 e3       	ldi	r30, 0x31	; 49
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	8f 77       	andi	r24, 0x7F	; 127
    156e:	8c 93       	st	X, r24
		
	}
	
	
	
}
    1570:	26 96       	adiw	r28, 0x06	; 6
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <DIO_VidSetPortValue>:
/*set dio port value for output*/
void DIO_VidSetPortValue(u8 copy_u8Port,u8 copy_u8Value){
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	00 d0       	rcall	.+0      	; 0x1588 <DIO_VidSetPortValue+0x6>
    1588:	00 d0       	rcall	.+0      	; 0x158a <DIO_VidSetPortValue+0x8>
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Port){
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	3c 83       	std	Y+4, r19	; 0x04
    159a:	2b 83       	std	Y+3, r18	; 0x03
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	91 05       	cpc	r25, r1
    15a4:	d1 f0       	breq	.+52     	; 0x15da <DIO_VidSetPortValue+0x58>
    15a6:	2b 81       	ldd	r18, Y+3	; 0x03
    15a8:	3c 81       	ldd	r19, Y+4	; 0x04
    15aa:	22 30       	cpi	r18, 0x02	; 2
    15ac:	31 05       	cpc	r19, r1
    15ae:	2c f4       	brge	.+10     	; 0x15ba <DIO_VidSetPortValue+0x38>
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	61 f0       	breq	.+24     	; 0x15d0 <DIO_VidSetPortValue+0x4e>
    15b8:	1e c0       	rjmp	.+60     	; 0x15f6 <DIO_VidSetPortValue+0x74>
    15ba:	2b 81       	ldd	r18, Y+3	; 0x03
    15bc:	3c 81       	ldd	r19, Y+4	; 0x04
    15be:	22 30       	cpi	r18, 0x02	; 2
    15c0:	31 05       	cpc	r19, r1
    15c2:	81 f0       	breq	.+32     	; 0x15e4 <DIO_VidSetPortValue+0x62>
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	83 30       	cpi	r24, 0x03	; 3
    15ca:	91 05       	cpc	r25, r1
    15cc:	81 f0       	breq	.+32     	; 0x15ee <DIO_VidSetPortValue+0x6c>
    15ce:	13 c0       	rjmp	.+38     	; 0x15f6 <DIO_VidSetPortValue+0x74>
	case Port_A:
		PORTA=copy_u8Value;
    15d0:	eb e3       	ldi	r30, 0x3B	; 59
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	80 83       	st	Z, r24
    15d8:	0e c0       	rjmp	.+28     	; 0x15f6 <DIO_VidSetPortValue+0x74>
		break;
	case Port_B:
		PORTB=copy_u8Value;
    15da:	e8 e3       	ldi	r30, 0x38	; 56
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	80 83       	st	Z, r24
    15e2:	09 c0       	rjmp	.+18     	; 0x15f6 <DIO_VidSetPortValue+0x74>
			break;
	case Port_C:
		PORTC=copy_u8Value;
    15e4:	e5 e3       	ldi	r30, 0x35	; 53
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	80 83       	st	Z, r24
    15ec:	04 c0       	rjmp	.+8      	; 0x15f6 <DIO_VidSetPortValue+0x74>
			break;
	case Port_D:
		PORTD=copy_u8Value;
    15ee:	e2 e3       	ldi	r30, 0x32	; 50
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	80 83       	st	Z, r24
			break;
	}
	
	
}
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <DIO_VidSetPortValueToggel>:
/*toggel port*/
void DIO_VidSetPortValueToggel(u8 copy_u8Port){
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	00 d0       	rcall	.+0      	; 0x160a <DIO_VidSetPortValueToggel+0x6>
    160a:	0f 92       	push	r0
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8Port){
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	3b 83       	std	Y+3, r19	; 0x03
    161a:	2a 83       	std	Y+2, r18	; 0x02
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	9b 81       	ldd	r25, Y+3	; 0x03
    1620:	81 30       	cpi	r24, 0x01	; 1
    1622:	91 05       	cpc	r25, r1
    1624:	09 f4       	brne	.+2      	; 0x1628 <DIO_VidSetPortValueToggel+0x24>
    1626:	58 c0       	rjmp	.+176    	; 0x16d8 <DIO_VidSetPortValueToggel+0xd4>
    1628:	2a 81       	ldd	r18, Y+2	; 0x02
    162a:	3b 81       	ldd	r19, Y+3	; 0x03
    162c:	22 30       	cpi	r18, 0x02	; 2
    162e:	31 05       	cpc	r19, r1
    1630:	2c f4       	brge	.+10     	; 0x163c <DIO_VidSetPortValueToggel+0x38>
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	9b 81       	ldd	r25, Y+3	; 0x03
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	71 f0       	breq	.+28     	; 0x1656 <DIO_VidSetPortValueToggel+0x52>
    163a:	10 c1       	rjmp	.+544    	; 0x185c <DIO_VidSetPortValueToggel+0x258>
    163c:	2a 81       	ldd	r18, Y+2	; 0x02
    163e:	3b 81       	ldd	r19, Y+3	; 0x03
    1640:	22 30       	cpi	r18, 0x02	; 2
    1642:	31 05       	cpc	r19, r1
    1644:	09 f4       	brne	.+2      	; 0x1648 <DIO_VidSetPortValueToggel+0x44>
    1646:	89 c0       	rjmp	.+274    	; 0x175a <DIO_VidSetPortValueToggel+0x156>
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	9b 81       	ldd	r25, Y+3	; 0x03
    164c:	83 30       	cpi	r24, 0x03	; 3
    164e:	91 05       	cpc	r25, r1
    1650:	09 f4       	brne	.+2      	; 0x1654 <DIO_VidSetPortValueToggel+0x50>
    1652:	c4 c0       	rjmp	.+392    	; 0x17dc <DIO_VidSetPortValueToggel+0x1d8>
    1654:	03 c1       	rjmp	.+518    	; 0x185c <DIO_VidSetPortValueToggel+0x258>
				case Port_A:
				Toggel_Bit(PORTA,0);
    1656:	ab e3       	ldi	r26, 0x3B	; 59
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	eb e3       	ldi	r30, 0x3B	; 59
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	90 81       	ld	r25, Z
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	89 27       	eor	r24, r25
    1664:	8c 93       	st	X, r24
				Toggel_Bit(PORTA,1);
    1666:	ab e3       	ldi	r26, 0x3B	; 59
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	eb e3       	ldi	r30, 0x3B	; 59
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	90 81       	ld	r25, Z
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	89 27       	eor	r24, r25
    1674:	8c 93       	st	X, r24
				Toggel_Bit(PORTA,2);
    1676:	ab e3       	ldi	r26, 0x3B	; 59
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	eb e3       	ldi	r30, 0x3B	; 59
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	90 81       	ld	r25, Z
    1680:	84 e0       	ldi	r24, 0x04	; 4
    1682:	89 27       	eor	r24, r25
    1684:	8c 93       	st	X, r24
				Toggel_Bit(PORTA,3);
    1686:	ab e3       	ldi	r26, 0x3B	; 59
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	eb e3       	ldi	r30, 0x3B	; 59
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	90 81       	ld	r25, Z
    1690:	88 e0       	ldi	r24, 0x08	; 8
    1692:	89 27       	eor	r24, r25
    1694:	8c 93       	st	X, r24
				Toggel_Bit(PORTA,4);
    1696:	ab e3       	ldi	r26, 0x3B	; 59
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	eb e3       	ldi	r30, 0x3B	; 59
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	90 81       	ld	r25, Z
    16a0:	80 e1       	ldi	r24, 0x10	; 16
    16a2:	89 27       	eor	r24, r25
    16a4:	8c 93       	st	X, r24
				Toggel_Bit(PORTA,5);
    16a6:	ab e3       	ldi	r26, 0x3B	; 59
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	eb e3       	ldi	r30, 0x3B	; 59
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	90 81       	ld	r25, Z
    16b0:	80 e2       	ldi	r24, 0x20	; 32
    16b2:	89 27       	eor	r24, r25
    16b4:	8c 93       	st	X, r24
				Toggel_Bit(PORTA,6);
    16b6:	ab e3       	ldi	r26, 0x3B	; 59
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	eb e3       	ldi	r30, 0x3B	; 59
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	90 81       	ld	r25, Z
    16c0:	80 e4       	ldi	r24, 0x40	; 64
    16c2:	89 27       	eor	r24, r25
    16c4:	8c 93       	st	X, r24
				Toggel_Bit(PORTA,7);
    16c6:	ab e3       	ldi	r26, 0x3B	; 59
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	eb e3       	ldi	r30, 0x3B	; 59
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	90 81       	ld	r25, Z
    16d0:	80 e8       	ldi	r24, 0x80	; 128
    16d2:	89 27       	eor	r24, r25
    16d4:	8c 93       	st	X, r24
    16d6:	c2 c0       	rjmp	.+388    	; 0x185c <DIO_VidSetPortValueToggel+0x258>
				break;

				case Port_B:
			    Toggel_Bit(PORTB,0);
    16d8:	a8 e3       	ldi	r26, 0x38	; 56
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e8 e3       	ldi	r30, 0x38	; 56
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	90 81       	ld	r25, Z
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	89 27       	eor	r24, r25
    16e6:	8c 93       	st	X, r24
				Toggel_Bit(PORTB,1);
    16e8:	a8 e3       	ldi	r26, 0x38	; 56
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e8 e3       	ldi	r30, 0x38	; 56
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	90 81       	ld	r25, Z
    16f2:	82 e0       	ldi	r24, 0x02	; 2
    16f4:	89 27       	eor	r24, r25
    16f6:	8c 93       	st	X, r24
				Toggel_Bit(PORTB,2);
    16f8:	a8 e3       	ldi	r26, 0x38	; 56
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e8 e3       	ldi	r30, 0x38	; 56
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	90 81       	ld	r25, Z
    1702:	84 e0       	ldi	r24, 0x04	; 4
    1704:	89 27       	eor	r24, r25
    1706:	8c 93       	st	X, r24
				Toggel_Bit(PORTB,3);
    1708:	a8 e3       	ldi	r26, 0x38	; 56
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e8 e3       	ldi	r30, 0x38	; 56
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	90 81       	ld	r25, Z
    1712:	88 e0       	ldi	r24, 0x08	; 8
    1714:	89 27       	eor	r24, r25
    1716:	8c 93       	st	X, r24
				Toggel_Bit(PORTB,4);
    1718:	a8 e3       	ldi	r26, 0x38	; 56
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e8 e3       	ldi	r30, 0x38	; 56
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	90 81       	ld	r25, Z
    1722:	80 e1       	ldi	r24, 0x10	; 16
    1724:	89 27       	eor	r24, r25
    1726:	8c 93       	st	X, r24
				Toggel_Bit(PORTB,5);
    1728:	a8 e3       	ldi	r26, 0x38	; 56
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e8 e3       	ldi	r30, 0x38	; 56
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	90 81       	ld	r25, Z
    1732:	80 e2       	ldi	r24, 0x20	; 32
    1734:	89 27       	eor	r24, r25
    1736:	8c 93       	st	X, r24
				Toggel_Bit(PORTB,6);
    1738:	a8 e3       	ldi	r26, 0x38	; 56
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e8 e3       	ldi	r30, 0x38	; 56
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	90 81       	ld	r25, Z
    1742:	80 e4       	ldi	r24, 0x40	; 64
    1744:	89 27       	eor	r24, r25
    1746:	8c 93       	st	X, r24
				Toggel_Bit(PORTB,7);
    1748:	a8 e3       	ldi	r26, 0x38	; 56
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e8 e3       	ldi	r30, 0x38	; 56
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	90 81       	ld	r25, Z
    1752:	80 e8       	ldi	r24, 0x80	; 128
    1754:	89 27       	eor	r24, r25
    1756:	8c 93       	st	X, r24
    1758:	81 c0       	rjmp	.+258    	; 0x185c <DIO_VidSetPortValueToggel+0x258>
				break;

				case Port_C:
				Toggel_Bit(PORTC,0);
    175a:	a5 e3       	ldi	r26, 0x35	; 53
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e5 e3       	ldi	r30, 0x35	; 53
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	90 81       	ld	r25, Z
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	89 27       	eor	r24, r25
    1768:	8c 93       	st	X, r24
				Toggel_Bit(PORTC,1);
    176a:	a5 e3       	ldi	r26, 0x35	; 53
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e5 e3       	ldi	r30, 0x35	; 53
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	90 81       	ld	r25, Z
    1774:	82 e0       	ldi	r24, 0x02	; 2
    1776:	89 27       	eor	r24, r25
    1778:	8c 93       	st	X, r24
				Toggel_Bit(PORTC,2);
    177a:	a5 e3       	ldi	r26, 0x35	; 53
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e5 e3       	ldi	r30, 0x35	; 53
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	90 81       	ld	r25, Z
    1784:	84 e0       	ldi	r24, 0x04	; 4
    1786:	89 27       	eor	r24, r25
    1788:	8c 93       	st	X, r24
				Toggel_Bit(PORTC,3);
    178a:	a5 e3       	ldi	r26, 0x35	; 53
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e5 e3       	ldi	r30, 0x35	; 53
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	90 81       	ld	r25, Z
    1794:	88 e0       	ldi	r24, 0x08	; 8
    1796:	89 27       	eor	r24, r25
    1798:	8c 93       	st	X, r24
				Toggel_Bit(PORTC,4);
    179a:	a5 e3       	ldi	r26, 0x35	; 53
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e5 e3       	ldi	r30, 0x35	; 53
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	90 81       	ld	r25, Z
    17a4:	80 e1       	ldi	r24, 0x10	; 16
    17a6:	89 27       	eor	r24, r25
    17a8:	8c 93       	st	X, r24
				Toggel_Bit(PORTC,5);
    17aa:	a5 e3       	ldi	r26, 0x35	; 53
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e5 e3       	ldi	r30, 0x35	; 53
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	90 81       	ld	r25, Z
    17b4:	80 e2       	ldi	r24, 0x20	; 32
    17b6:	89 27       	eor	r24, r25
    17b8:	8c 93       	st	X, r24
				Toggel_Bit(PORTC,6);
    17ba:	a5 e3       	ldi	r26, 0x35	; 53
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e5 e3       	ldi	r30, 0x35	; 53
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	90 81       	ld	r25, Z
    17c4:	80 e4       	ldi	r24, 0x40	; 64
    17c6:	89 27       	eor	r24, r25
    17c8:	8c 93       	st	X, r24
				Toggel_Bit(PORTC,7);
    17ca:	a5 e3       	ldi	r26, 0x35	; 53
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e5 e3       	ldi	r30, 0x35	; 53
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	90 81       	ld	r25, Z
    17d4:	80 e8       	ldi	r24, 0x80	; 128
    17d6:	89 27       	eor	r24, r25
    17d8:	8c 93       	st	X, r24
    17da:	40 c0       	rjmp	.+128    	; 0x185c <DIO_VidSetPortValueToggel+0x258>
				break;

				case Port_D:
				Toggel_Bit(PORTD,0);
    17dc:	a2 e3       	ldi	r26, 0x32	; 50
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e2 e3       	ldi	r30, 0x32	; 50
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	90 81       	ld	r25, Z
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	89 27       	eor	r24, r25
    17ea:	8c 93       	st	X, r24
				Toggel_Bit(PORTD,1);
    17ec:	a2 e3       	ldi	r26, 0x32	; 50
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e2 e3       	ldi	r30, 0x32	; 50
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	90 81       	ld	r25, Z
    17f6:	82 e0       	ldi	r24, 0x02	; 2
    17f8:	89 27       	eor	r24, r25
    17fa:	8c 93       	st	X, r24
				Toggel_Bit(PORTD,2);
    17fc:	a2 e3       	ldi	r26, 0x32	; 50
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e2 e3       	ldi	r30, 0x32	; 50
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	90 81       	ld	r25, Z
    1806:	84 e0       	ldi	r24, 0x04	; 4
    1808:	89 27       	eor	r24, r25
    180a:	8c 93       	st	X, r24
				Toggel_Bit(PORTD,3);
    180c:	a2 e3       	ldi	r26, 0x32	; 50
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e2 e3       	ldi	r30, 0x32	; 50
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	90 81       	ld	r25, Z
    1816:	88 e0       	ldi	r24, 0x08	; 8
    1818:	89 27       	eor	r24, r25
    181a:	8c 93       	st	X, r24
				Toggel_Bit(PORTD,4);
    181c:	a2 e3       	ldi	r26, 0x32	; 50
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e2 e3       	ldi	r30, 0x32	; 50
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	90 81       	ld	r25, Z
    1826:	80 e1       	ldi	r24, 0x10	; 16
    1828:	89 27       	eor	r24, r25
    182a:	8c 93       	st	X, r24
				Toggel_Bit(PORTD,5);
    182c:	a2 e3       	ldi	r26, 0x32	; 50
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e2 e3       	ldi	r30, 0x32	; 50
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	90 81       	ld	r25, Z
    1836:	80 e2       	ldi	r24, 0x20	; 32
    1838:	89 27       	eor	r24, r25
    183a:	8c 93       	st	X, r24
				Toggel_Bit(PORTD,6);
    183c:	a2 e3       	ldi	r26, 0x32	; 50
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e2 e3       	ldi	r30, 0x32	; 50
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	90 81       	ld	r25, Z
    1846:	80 e4       	ldi	r24, 0x40	; 64
    1848:	89 27       	eor	r24, r25
    184a:	8c 93       	st	X, r24
				Toggel_Bit(PORTD,7);
    184c:	a2 e3       	ldi	r26, 0x32	; 50
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e2 e3       	ldi	r30, 0x32	; 50
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	90 81       	ld	r25, Z
    1856:	80 e8       	ldi	r24, 0x80	; 128
    1858:	89 27       	eor	r24, r25
    185a:	8c 93       	st	X, r24


			}


}
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <DIO_VidGetPortValue>:
/*get port value*/
void DIO_VidGetPortValue(u8 copy_u8Port,u8* pu8Value){
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	00 d0       	rcall	.+0      	; 0x186e <DIO_VidGetPortValue+0x6>
    186e:	00 d0       	rcall	.+0      	; 0x1870 <DIO_VidGetPortValue+0x8>
    1870:	0f 92       	push	r0
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	7b 83       	std	Y+3, r23	; 0x03
    187a:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Port){
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	3d 83       	std	Y+5, r19	; 0x05
    1884:	2c 83       	std	Y+4, r18	; 0x04
    1886:	8c 81       	ldd	r24, Y+4	; 0x04
    1888:	9d 81       	ldd	r25, Y+5	; 0x05
    188a:	81 30       	cpi	r24, 0x01	; 1
    188c:	91 05       	cpc	r25, r1
    188e:	09 f4       	brne	.+2      	; 0x1892 <DIO_VidGetPortValue+0x2a>
    1890:	6f c0       	rjmp	.+222    	; 0x1970 <DIO_VidGetPortValue+0x108>
    1892:	2c 81       	ldd	r18, Y+4	; 0x04
    1894:	3d 81       	ldd	r19, Y+5	; 0x05
    1896:	22 30       	cpi	r18, 0x02	; 2
    1898:	31 05       	cpc	r19, r1
    189a:	2c f4       	brge	.+10     	; 0x18a6 <DIO_VidGetPortValue+0x3e>
    189c:	8c 81       	ldd	r24, Y+4	; 0x04
    189e:	9d 81       	ldd	r25, Y+5	; 0x05
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	71 f0       	breq	.+28     	; 0x18c0 <DIO_VidGetPortValue+0x58>
    18a4:	6c c1       	rjmp	.+728    	; 0x1b7e <DIO_VidGetPortValue+0x316>
    18a6:	2c 81       	ldd	r18, Y+4	; 0x04
    18a8:	3d 81       	ldd	r19, Y+5	; 0x05
    18aa:	22 30       	cpi	r18, 0x02	; 2
    18ac:	31 05       	cpc	r19, r1
    18ae:	09 f4       	brne	.+2      	; 0x18b2 <DIO_VidGetPortValue+0x4a>
    18b0:	b7 c0       	rjmp	.+366    	; 0x1a20 <DIO_VidGetPortValue+0x1b8>
    18b2:	8c 81       	ldd	r24, Y+4	; 0x04
    18b4:	9d 81       	ldd	r25, Y+5	; 0x05
    18b6:	83 30       	cpi	r24, 0x03	; 3
    18b8:	91 05       	cpc	r25, r1
    18ba:	09 f4       	brne	.+2      	; 0x18be <DIO_VidGetPortValue+0x56>
    18bc:	09 c1       	rjmp	.+530    	; 0x1ad0 <DIO_VidGetPortValue+0x268>
    18be:	5f c1       	rjmp	.+702    	; 0x1b7e <DIO_VidGetPortValue+0x316>
		
			case Port_A:
		pu8Value[0]=GET_BIT(PINA,0);
    18c0:	e9 e3       	ldi	r30, 0x39	; 57
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	81 70       	andi	r24, 0x01	; 1
    18c8:	ea 81       	ldd	r30, Y+2	; 0x02
    18ca:	fb 81       	ldd	r31, Y+3	; 0x03
    18cc:	80 83       	st	Z, r24
		pu8Value[1]=GET_BIT(PINA,1);
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	9b 81       	ldd	r25, Y+3	; 0x03
    18d2:	dc 01       	movw	r26, r24
    18d4:	11 96       	adiw	r26, 0x01	; 1
    18d6:	e9 e3       	ldi	r30, 0x39	; 57
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	86 95       	lsr	r24
    18de:	81 70       	andi	r24, 0x01	; 1
    18e0:	8c 93       	st	X, r24
		pu8Value[2]=GET_BIT(PINA,2);
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	9b 81       	ldd	r25, Y+3	; 0x03
    18e6:	dc 01       	movw	r26, r24
    18e8:	12 96       	adiw	r26, 0x02	; 2
    18ea:	e9 e3       	ldi	r30, 0x39	; 57
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	86 95       	lsr	r24
    18f2:	86 95       	lsr	r24
    18f4:	81 70       	andi	r24, 0x01	; 1
    18f6:	8c 93       	st	X, r24
		pu8Value[3]=GET_BIT(PINA,3);
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	9b 81       	ldd	r25, Y+3	; 0x03
    18fc:	dc 01       	movw	r26, r24
    18fe:	13 96       	adiw	r26, 0x03	; 3
    1900:	e9 e3       	ldi	r30, 0x39	; 57
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	86 95       	lsr	r24
    1908:	86 95       	lsr	r24
    190a:	86 95       	lsr	r24
    190c:	81 70       	andi	r24, 0x01	; 1
    190e:	8c 93       	st	X, r24
		pu8Value[4]=GET_BIT(PINA,4);
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	9b 81       	ldd	r25, Y+3	; 0x03
    1914:	dc 01       	movw	r26, r24
    1916:	14 96       	adiw	r26, 0x04	; 4
    1918:	e9 e3       	ldi	r30, 0x39	; 57
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	82 95       	swap	r24
    1920:	8f 70       	andi	r24, 0x0F	; 15
    1922:	81 70       	andi	r24, 0x01	; 1
    1924:	8c 93       	st	X, r24
		pu8Value[5]=GET_BIT(PINA,5);
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	9b 81       	ldd	r25, Y+3	; 0x03
    192a:	dc 01       	movw	r26, r24
    192c:	15 96       	adiw	r26, 0x05	; 5
    192e:	e9 e3       	ldi	r30, 0x39	; 57
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	82 95       	swap	r24
    1936:	86 95       	lsr	r24
    1938:	87 70       	andi	r24, 0x07	; 7
    193a:	81 70       	andi	r24, 0x01	; 1
    193c:	8c 93       	st	X, r24
		pu8Value[6]=GET_BIT(PINA,6);
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	9b 81       	ldd	r25, Y+3	; 0x03
    1942:	dc 01       	movw	r26, r24
    1944:	16 96       	adiw	r26, 0x06	; 6
    1946:	e9 e3       	ldi	r30, 0x39	; 57
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	82 95       	swap	r24
    194e:	86 95       	lsr	r24
    1950:	86 95       	lsr	r24
    1952:	83 70       	andi	r24, 0x03	; 3
    1954:	81 70       	andi	r24, 0x01	; 1
    1956:	8c 93       	st	X, r24
		pu8Value[7]=GET_BIT(PINA,7);
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	9b 81       	ldd	r25, Y+3	; 0x03
    195c:	dc 01       	movw	r26, r24
    195e:	17 96       	adiw	r26, 0x07	; 7
    1960:	e9 e3       	ldi	r30, 0x39	; 57
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	88 1f       	adc	r24, r24
    1968:	88 27       	eor	r24, r24
    196a:	88 1f       	adc	r24, r24
    196c:	8c 93       	st	X, r24
    196e:	07 c1       	rjmp	.+526    	; 0x1b7e <DIO_VidGetPortValue+0x316>
			break;
			case Port_B:
		pu8Value[0]=GET_BIT(PINB,0);
    1970:	e6 e3       	ldi	r30, 0x36	; 54
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	81 70       	andi	r24, 0x01	; 1
    1978:	ea 81       	ldd	r30, Y+2	; 0x02
    197a:	fb 81       	ldd	r31, Y+3	; 0x03
    197c:	80 83       	st	Z, r24
		pu8Value[1]=GET_BIT(PINB,1);
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	9b 81       	ldd	r25, Y+3	; 0x03
    1982:	dc 01       	movw	r26, r24
    1984:	11 96       	adiw	r26, 0x01	; 1
    1986:	e6 e3       	ldi	r30, 0x36	; 54
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	86 95       	lsr	r24
    198e:	81 70       	andi	r24, 0x01	; 1
    1990:	8c 93       	st	X, r24
		pu8Value[2]=GET_BIT(PINB,2);
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	9b 81       	ldd	r25, Y+3	; 0x03
    1996:	dc 01       	movw	r26, r24
    1998:	12 96       	adiw	r26, 0x02	; 2
    199a:	e6 e3       	ldi	r30, 0x36	; 54
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	86 95       	lsr	r24
    19a2:	86 95       	lsr	r24
    19a4:	81 70       	andi	r24, 0x01	; 1
    19a6:	8c 93       	st	X, r24
		pu8Value[3]=GET_BIT(PINB,3);
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	9b 81       	ldd	r25, Y+3	; 0x03
    19ac:	dc 01       	movw	r26, r24
    19ae:	13 96       	adiw	r26, 0x03	; 3
    19b0:	e6 e3       	ldi	r30, 0x36	; 54
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	86 95       	lsr	r24
    19b8:	86 95       	lsr	r24
    19ba:	86 95       	lsr	r24
    19bc:	81 70       	andi	r24, 0x01	; 1
    19be:	8c 93       	st	X, r24
		pu8Value[4]=GET_BIT(PINB,4);
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	9b 81       	ldd	r25, Y+3	; 0x03
    19c4:	dc 01       	movw	r26, r24
    19c6:	14 96       	adiw	r26, 0x04	; 4
    19c8:	e6 e3       	ldi	r30, 0x36	; 54
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	82 95       	swap	r24
    19d0:	8f 70       	andi	r24, 0x0F	; 15
    19d2:	81 70       	andi	r24, 0x01	; 1
    19d4:	8c 93       	st	X, r24
		pu8Value[5]=GET_BIT(PINB,5);
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	9b 81       	ldd	r25, Y+3	; 0x03
    19da:	dc 01       	movw	r26, r24
    19dc:	15 96       	adiw	r26, 0x05	; 5
    19de:	e6 e3       	ldi	r30, 0x36	; 54
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	82 95       	swap	r24
    19e6:	86 95       	lsr	r24
    19e8:	87 70       	andi	r24, 0x07	; 7
    19ea:	81 70       	andi	r24, 0x01	; 1
    19ec:	8c 93       	st	X, r24
		pu8Value[6]=GET_BIT(PINB,6);
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	9b 81       	ldd	r25, Y+3	; 0x03
    19f2:	dc 01       	movw	r26, r24
    19f4:	16 96       	adiw	r26, 0x06	; 6
    19f6:	e6 e3       	ldi	r30, 0x36	; 54
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	82 95       	swap	r24
    19fe:	86 95       	lsr	r24
    1a00:	86 95       	lsr	r24
    1a02:	83 70       	andi	r24, 0x03	; 3
    1a04:	81 70       	andi	r24, 0x01	; 1
    1a06:	8c 93       	st	X, r24
		pu8Value[7]=GET_BIT(PINB,7);
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	17 96       	adiw	r26, 0x07	; 7
    1a10:	e6 e3       	ldi	r30, 0x36	; 54
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	88 1f       	adc	r24, r24
    1a18:	88 27       	eor	r24, r24
    1a1a:	88 1f       	adc	r24, r24
    1a1c:	8c 93       	st	X, r24
    1a1e:	af c0       	rjmp	.+350    	; 0x1b7e <DIO_VidGetPortValue+0x316>
			break;
			
			case Port_C:
		pu8Value[0]=GET_BIT(PINC,0);
    1a20:	e3 e3       	ldi	r30, 0x33	; 51
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	81 70       	andi	r24, 0x01	; 1
    1a28:	ea 81       	ldd	r30, Y+2	; 0x02
    1a2a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a2c:	80 83       	st	Z, r24
		pu8Value[1]=GET_BIT(PINC,1);
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	9b 81       	ldd	r25, Y+3	; 0x03
    1a32:	dc 01       	movw	r26, r24
    1a34:	11 96       	adiw	r26, 0x01	; 1
    1a36:	e3 e3       	ldi	r30, 0x33	; 51
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	86 95       	lsr	r24
    1a3e:	81 70       	andi	r24, 0x01	; 1
    1a40:	8c 93       	st	X, r24
		pu8Value[2]=GET_BIT(PINC,2);
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	9b 81       	ldd	r25, Y+3	; 0x03
    1a46:	dc 01       	movw	r26, r24
    1a48:	12 96       	adiw	r26, 0x02	; 2
    1a4a:	e3 e3       	ldi	r30, 0x33	; 51
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	86 95       	lsr	r24
    1a52:	86 95       	lsr	r24
    1a54:	81 70       	andi	r24, 0x01	; 1
    1a56:	8c 93       	st	X, r24
		pu8Value[3]=GET_BIT(PINC,3);
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	13 96       	adiw	r26, 0x03	; 3
    1a60:	e3 e3       	ldi	r30, 0x33	; 51
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	86 95       	lsr	r24
    1a68:	86 95       	lsr	r24
    1a6a:	86 95       	lsr	r24
    1a6c:	81 70       	andi	r24, 0x01	; 1
    1a6e:	8c 93       	st	X, r24
		pu8Value[4]=GET_BIT(PINC,4);
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	9b 81       	ldd	r25, Y+3	; 0x03
    1a74:	dc 01       	movw	r26, r24
    1a76:	14 96       	adiw	r26, 0x04	; 4
    1a78:	e3 e3       	ldi	r30, 0x33	; 51
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	82 95       	swap	r24
    1a80:	8f 70       	andi	r24, 0x0F	; 15
    1a82:	81 70       	andi	r24, 0x01	; 1
    1a84:	8c 93       	st	X, r24
		pu8Value[5]=GET_BIT(PINC,5);
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	15 96       	adiw	r26, 0x05	; 5
    1a8e:	e3 e3       	ldi	r30, 0x33	; 51
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	82 95       	swap	r24
    1a96:	86 95       	lsr	r24
    1a98:	87 70       	andi	r24, 0x07	; 7
    1a9a:	81 70       	andi	r24, 0x01	; 1
    1a9c:	8c 93       	st	X, r24
		pu8Value[6]=GET_BIT(PINC,6);
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	16 96       	adiw	r26, 0x06	; 6
    1aa6:	e3 e3       	ldi	r30, 0x33	; 51
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	82 95       	swap	r24
    1aae:	86 95       	lsr	r24
    1ab0:	86 95       	lsr	r24
    1ab2:	83 70       	andi	r24, 0x03	; 3
    1ab4:	81 70       	andi	r24, 0x01	; 1
    1ab6:	8c 93       	st	X, r24
		pu8Value[7]=GET_BIT(PINC,7);
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	9b 81       	ldd	r25, Y+3	; 0x03
    1abc:	dc 01       	movw	r26, r24
    1abe:	17 96       	adiw	r26, 0x07	; 7
    1ac0:	e3 e3       	ldi	r30, 0x33	; 51
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	88 1f       	adc	r24, r24
    1ac8:	88 27       	eor	r24, r24
    1aca:	88 1f       	adc	r24, r24
    1acc:	8c 93       	st	X, r24
    1ace:	57 c0       	rjmp	.+174    	; 0x1b7e <DIO_VidGetPortValue+0x316>
			break;
			
			case Port_D:
		pu8Value[0]=GET_BIT(PIND,0);
    1ad0:	e0 e3       	ldi	r30, 0x30	; 48
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	81 70       	andi	r24, 0x01	; 1
    1ad8:	ea 81       	ldd	r30, Y+2	; 0x02
    1ada:	fb 81       	ldd	r31, Y+3	; 0x03
    1adc:	80 83       	st	Z, r24
		pu8Value[1]=GET_BIT(PIND,1);
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	11 96       	adiw	r26, 0x01	; 1
    1ae6:	e0 e3       	ldi	r30, 0x30	; 48
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	86 95       	lsr	r24
    1aee:	81 70       	andi	r24, 0x01	; 1
    1af0:	8c 93       	st	X, r24
		pu8Value[2]=GET_BIT(PIND,2);
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	9b 81       	ldd	r25, Y+3	; 0x03
    1af6:	dc 01       	movw	r26, r24
    1af8:	12 96       	adiw	r26, 0x02	; 2
    1afa:	e0 e3       	ldi	r30, 0x30	; 48
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	86 95       	lsr	r24
    1b02:	86 95       	lsr	r24
    1b04:	81 70       	andi	r24, 0x01	; 1
    1b06:	8c 93       	st	X, r24
		pu8Value[3]=GET_BIT(PIND,3);
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	13 96       	adiw	r26, 0x03	; 3
    1b10:	e0 e3       	ldi	r30, 0x30	; 48
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	86 95       	lsr	r24
    1b18:	86 95       	lsr	r24
    1b1a:	86 95       	lsr	r24
    1b1c:	81 70       	andi	r24, 0x01	; 1
    1b1e:	8c 93       	st	X, r24
		pu8Value[4]=GET_BIT(PIND,4);
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	9b 81       	ldd	r25, Y+3	; 0x03
    1b24:	dc 01       	movw	r26, r24
    1b26:	14 96       	adiw	r26, 0x04	; 4
    1b28:	e0 e3       	ldi	r30, 0x30	; 48
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	82 95       	swap	r24
    1b30:	8f 70       	andi	r24, 0x0F	; 15
    1b32:	81 70       	andi	r24, 0x01	; 1
    1b34:	8c 93       	st	X, r24
		pu8Value[5]=GET_BIT(PIND,5);
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	15 96       	adiw	r26, 0x05	; 5
    1b3e:	e0 e3       	ldi	r30, 0x30	; 48
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	82 95       	swap	r24
    1b46:	86 95       	lsr	r24
    1b48:	87 70       	andi	r24, 0x07	; 7
    1b4a:	81 70       	andi	r24, 0x01	; 1
    1b4c:	8c 93       	st	X, r24
		pu8Value[6]=GET_BIT(PIND,6);
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	9b 81       	ldd	r25, Y+3	; 0x03
    1b52:	dc 01       	movw	r26, r24
    1b54:	16 96       	adiw	r26, 0x06	; 6
    1b56:	e0 e3       	ldi	r30, 0x30	; 48
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	82 95       	swap	r24
    1b5e:	86 95       	lsr	r24
    1b60:	86 95       	lsr	r24
    1b62:	83 70       	andi	r24, 0x03	; 3
    1b64:	81 70       	andi	r24, 0x01	; 1
    1b66:	8c 93       	st	X, r24
		pu8Value[7]=GET_BIT(PIND,7);
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	17 96       	adiw	r26, 0x07	; 7
    1b70:	e0 e3       	ldi	r30, 0x30	; 48
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	88 1f       	adc	r24, r24
    1b78:	88 27       	eor	r24, r24
    1b7a:	88 1f       	adc	r24, r24
    1b7c:	8c 93       	st	X, r24
			
		}
	
	
	
}
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <NumberSSD>:
//*****************************************************************

void NumberSSD(u8 copy_u8Port,u8 Num){
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	6b 97       	sbiw	r28, 0x1b	; 27
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	8f 87       	std	Y+15, r24	; 0x0f
    1ba4:	68 8b       	std	Y+16, r22	; 0x10
	u8 SSD[]={0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
    1ba6:	9e 01       	movw	r18, r28
    1ba8:	2b 5f       	subi	r18, 0xFB	; 251
    1baa:	3f 4f       	sbci	r19, 0xFF	; 255
    1bac:	38 8f       	std	Y+24, r19	; 0x18
    1bae:	2f 8b       	std	Y+23, r18	; 0x17
    1bb0:	4a e8       	ldi	r20, 0x8A	; 138
    1bb2:	50 e0       	ldi	r21, 0x00	; 0
    1bb4:	5a 8f       	std	Y+26, r21	; 0x1a
    1bb6:	49 8f       	std	Y+25, r20	; 0x19
    1bb8:	5a e0       	ldi	r21, 0x0A	; 10
    1bba:	5b 8f       	std	Y+27, r21	; 0x1b
    1bbc:	e9 8d       	ldd	r30, Y+25	; 0x19
    1bbe:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1bc0:	00 80       	ld	r0, Z
    1bc2:	29 8d       	ldd	r18, Y+25	; 0x19
    1bc4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1bc6:	2f 5f       	subi	r18, 0xFF	; 255
    1bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bca:	3a 8f       	std	Y+26, r19	; 0x1a
    1bcc:	29 8f       	std	Y+25, r18	; 0x19
    1bce:	ef 89       	ldd	r30, Y+23	; 0x17
    1bd0:	f8 8d       	ldd	r31, Y+24	; 0x18
    1bd2:	00 82       	st	Z, r0
    1bd4:	2f 89       	ldd	r18, Y+23	; 0x17
    1bd6:	38 8d       	ldd	r19, Y+24	; 0x18
    1bd8:	2f 5f       	subi	r18, 0xFF	; 255
    1bda:	3f 4f       	sbci	r19, 0xFF	; 255
    1bdc:	38 8f       	std	Y+24, r19	; 0x18
    1bde:	2f 8b       	std	Y+23, r18	; 0x17
    1be0:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1be2:	31 50       	subi	r19, 0x01	; 1
    1be4:	3b 8f       	std	Y+27, r19	; 0x1b
    1be6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1be8:	44 23       	and	r20, r20
    1bea:	41 f7       	brne	.-48     	; 0x1bbc <NumberSSD+0x2e>
    switch(copy_u8Port){
    1bec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bee:	e8 2f       	mov	r30, r24
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	fe 8b       	std	Y+22, r31	; 0x16
    1bf4:	ed 8b       	std	Y+21, r30	; 0x15
    1bf6:	2d 89       	ldd	r18, Y+21	; 0x15
    1bf8:	3e 89       	ldd	r19, Y+22	; 0x16
    1bfa:	21 30       	cpi	r18, 0x01	; 1
    1bfc:	31 05       	cpc	r19, r1
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <NumberSSD+0x74>
    1c00:	41 c0       	rjmp	.+130    	; 0x1c84 <NumberSSD+0xf6>
    1c02:	4d 89       	ldd	r20, Y+21	; 0x15
    1c04:	5e 89       	ldd	r21, Y+22	; 0x16
    1c06:	42 30       	cpi	r20, 0x02	; 2
    1c08:	51 05       	cpc	r21, r1
    1c0a:	2c f4       	brge	.+10     	; 0x1c16 <NumberSSD+0x88>
    1c0c:	8d 89       	ldd	r24, Y+21	; 0x15
    1c0e:	9e 89       	ldd	r25, Y+22	; 0x16
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	71 f0       	breq	.+28     	; 0x1c30 <NumberSSD+0xa2>
    1c14:	b4 c0       	rjmp	.+360    	; 0x1d7e <NumberSSD+0x1f0>
    1c16:	ed 89       	ldd	r30, Y+21	; 0x15
    1c18:	fe 89       	ldd	r31, Y+22	; 0x16
    1c1a:	e2 30       	cpi	r30, 0x02	; 2
    1c1c:	f1 05       	cpc	r31, r1
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <NumberSSD+0x94>
    1c20:	5b c0       	rjmp	.+182    	; 0x1cd8 <NumberSSD+0x14a>
    1c22:	2d 89       	ldd	r18, Y+21	; 0x15
    1c24:	3e 89       	ldd	r19, Y+22	; 0x16
    1c26:	23 30       	cpi	r18, 0x03	; 3
    1c28:	31 05       	cpc	r19, r1
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <NumberSSD+0xa0>
    1c2c:	7f c0       	rjmp	.+254    	; 0x1d2c <NumberSSD+0x19e>
    1c2e:	a7 c0       	rjmp	.+334    	; 0x1d7e <NumberSSD+0x1f0>
    case Port_A:
    	for(u8 i=0;i<8;i++){
    1c30:	1c 82       	std	Y+4, r1	; 0x04
    1c32:	24 c0       	rjmp	.+72     	; 0x1c7c <NumberSSD+0xee>
    		DIO_VidSetPinValue(Port_A,i,~GET_BIT(SSD[Num],i));
    1c34:	88 89       	ldd	r24, Y+16	; 0x10
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	05 96       	adiw	r24, 0x05	; 5
    1c3e:	fc 01       	movw	r30, r24
    1c40:	e2 0f       	add	r30, r18
    1c42:	f3 1f       	adc	r31, r19
    1c44:	80 81       	ld	r24, Z
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4c:	88 2f       	mov	r24, r24
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	a9 01       	movw	r20, r18
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <NumberSSD+0xca>
    1c54:	55 95       	asr	r21
    1c56:	47 95       	ror	r20
    1c58:	8a 95       	dec	r24
    1c5a:	e2 f7       	brpl	.-8      	; 0x1c54 <NumberSSD+0xc6>
    1c5c:	ca 01       	movw	r24, r20
    1c5e:	81 70       	andi	r24, 0x01	; 1
    1c60:	90 70       	andi	r25, 0x00	; 0
    1c62:	1c 8a       	std	Y+20, r1	; 0x14
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	11 f4       	brne	.+4      	; 0x1c6c <NumberSSD+0xde>
    1c68:	51 e0       	ldi	r21, 0x01	; 1
    1c6a:	5c 8b       	std	Y+20, r21	; 0x14
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	6c 81       	ldd	r22, Y+4	; 0x04
    1c70:	4c 89       	ldd	r20, Y+20	; 0x14
    1c72:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>

void NumberSSD(u8 copy_u8Port,u8 Num){
	u8 SSD[]={0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
    switch(copy_u8Port){
    case Port_A:
    	for(u8 i=0;i<8;i++){
    1c76:	8c 81       	ldd	r24, Y+4	; 0x04
    1c78:	8f 5f       	subi	r24, 0xFF	; 255
    1c7a:	8c 83       	std	Y+4, r24	; 0x04
    1c7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7e:	88 30       	cpi	r24, 0x08	; 8
    1c80:	c8 f2       	brcs	.-78     	; 0x1c34 <NumberSSD+0xa6>
    1c82:	7d c0       	rjmp	.+250    	; 0x1d7e <NumberSSD+0x1f0>
    		DIO_VidSetPinValue(Port_A,i,~GET_BIT(SSD[Num],i));
    	}
    	break;
    case Port_B:
    	for(u8 i=0;i<8;i++){
    1c84:	1b 82       	std	Y+3, r1	; 0x03
    1c86:	24 c0       	rjmp	.+72     	; 0x1cd0 <NumberSSD+0x142>
    	    		DIO_VidSetPinValue(Port_B,i,~GET_BIT(SSD[Num],i));
    1c88:	88 89       	ldd	r24, Y+16	; 0x10
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	ce 01       	movw	r24, r28
    1c90:	05 96       	adiw	r24, 0x05	; 5
    1c92:	fc 01       	movw	r30, r24
    1c94:	e2 0f       	add	r30, r18
    1c96:	f3 1f       	adc	r31, r19
    1c98:	80 81       	ld	r24, Z
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	88 2f       	mov	r24, r24
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	f9 01       	movw	r30, r18
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <NumberSSD+0x11e>
    1ca8:	f5 95       	asr	r31
    1caa:	e7 95       	ror	r30
    1cac:	8a 95       	dec	r24
    1cae:	e2 f7       	brpl	.-8      	; 0x1ca8 <NumberSSD+0x11a>
    1cb0:	cf 01       	movw	r24, r30
    1cb2:	81 70       	andi	r24, 0x01	; 1
    1cb4:	90 70       	andi	r25, 0x00	; 0
    1cb6:	1b 8a       	std	Y+19, r1	; 0x13
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	11 f4       	brne	.+4      	; 0x1cc0 <NumberSSD+0x132>
    1cbc:	f1 e0       	ldi	r31, 0x01	; 1
    1cbe:	fb 8b       	std	Y+19, r31	; 0x13
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	6b 81       	ldd	r22, Y+3	; 0x03
    1cc4:	4b 89       	ldd	r20, Y+19	; 0x13
    1cc6:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
    	for(u8 i=0;i<8;i++){
    		DIO_VidSetPinValue(Port_A,i,~GET_BIT(SSD[Num],i));
    	}
    	break;
    case Port_B:
    	for(u8 i=0;i<8;i++){
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	8f 5f       	subi	r24, 0xFF	; 255
    1cce:	8b 83       	std	Y+3, r24	; 0x03
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	88 30       	cpi	r24, 0x08	; 8
    1cd4:	c8 f2       	brcs	.-78     	; 0x1c88 <NumberSSD+0xfa>
    1cd6:	53 c0       	rjmp	.+166    	; 0x1d7e <NumberSSD+0x1f0>
    	    		DIO_VidSetPinValue(Port_B,i,~GET_BIT(SSD[Num],i));

    	    	}
     break;
    case Port_C:
    	for(u8 i=0;i<8;i++){
    1cd8:	1a 82       	std	Y+2, r1	; 0x02
    1cda:	24 c0       	rjmp	.+72     	; 0x1d24 <NumberSSD+0x196>
    		DIO_VidSetPinValue(Port_C,i,~GET_BIT(SSD[Num],i));
    1cdc:	88 89       	ldd	r24, Y+16	; 0x10
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	05 96       	adiw	r24, 0x05	; 5
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	e2 0f       	add	r30, r18
    1cea:	f3 1f       	adc	r31, r19
    1cec:	80 81       	ld	r24, Z
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	a9 01       	movw	r20, r18
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <NumberSSD+0x172>
    1cfc:	55 95       	asr	r21
    1cfe:	47 95       	ror	r20
    1d00:	8a 95       	dec	r24
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <NumberSSD+0x16e>
    1d04:	ca 01       	movw	r24, r20
    1d06:	81 70       	andi	r24, 0x01	; 1
    1d08:	90 70       	andi	r25, 0x00	; 0
    1d0a:	1a 8a       	std	Y+18, r1	; 0x12
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	11 f4       	brne	.+4      	; 0x1d14 <NumberSSD+0x186>
    1d10:	51 e0       	ldi	r21, 0x01	; 1
    1d12:	5a 8b       	std	Y+18, r21	; 0x12
    1d14:	82 e0       	ldi	r24, 0x02	; 2
    1d16:	6a 81       	ldd	r22, Y+2	; 0x02
    1d18:	4a 89       	ldd	r20, Y+18	; 0x12
    1d1a:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
    	    		DIO_VidSetPinValue(Port_B,i,~GET_BIT(SSD[Num],i));

    	    	}
     break;
    case Port_C:
    	for(u8 i=0;i<8;i++){
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	8f 5f       	subi	r24, 0xFF	; 255
    1d22:	8a 83       	std	Y+2, r24	; 0x02
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	88 30       	cpi	r24, 0x08	; 8
    1d28:	c8 f2       	brcs	.-78     	; 0x1cdc <NumberSSD+0x14e>
    1d2a:	29 c0       	rjmp	.+82     	; 0x1d7e <NumberSSD+0x1f0>
    		DIO_VidSetPinValue(Port_C,i,~GET_BIT(SSD[Num],i));
    	}
       	break;
    case Port_D:
    	for(u8 i=0;i<8;i++){
    1d2c:	19 82       	std	Y+1, r1	; 0x01
    1d2e:	24 c0       	rjmp	.+72     	; 0x1d78 <NumberSSD+0x1ea>
    		DIO_VidSetPinValue(Port_D,i,~GET_BIT(SSD[Num],i));
    1d30:	88 89       	ldd	r24, Y+16	; 0x10
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	ce 01       	movw	r24, r28
    1d38:	05 96       	adiw	r24, 0x05	; 5
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	e2 0f       	add	r30, r18
    1d3e:	f3 1f       	adc	r31, r19
    1d40:	80 81       	ld	r24, Z
    1d42:	28 2f       	mov	r18, r24
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	88 2f       	mov	r24, r24
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	f9 01       	movw	r30, r18
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <NumberSSD+0x1c6>
    1d50:	f5 95       	asr	r31
    1d52:	e7 95       	ror	r30
    1d54:	8a 95       	dec	r24
    1d56:	e2 f7       	brpl	.-8      	; 0x1d50 <NumberSSD+0x1c2>
    1d58:	cf 01       	movw	r24, r30
    1d5a:	81 70       	andi	r24, 0x01	; 1
    1d5c:	90 70       	andi	r25, 0x00	; 0
    1d5e:	19 8a       	std	Y+17, r1	; 0x11
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	11 f4       	brne	.+4      	; 0x1d68 <NumberSSD+0x1da>
    1d64:	f1 e0       	ldi	r31, 0x01	; 1
    1d66:	f9 8b       	std	Y+17, r31	; 0x11
    1d68:	83 e0       	ldi	r24, 0x03	; 3
    1d6a:	69 81       	ldd	r22, Y+1	; 0x01
    1d6c:	49 89       	ldd	r20, Y+17	; 0x11
    1d6e:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
    	for(u8 i=0;i<8;i++){
    		DIO_VidSetPinValue(Port_C,i,~GET_BIT(SSD[Num],i));
    	}
       	break;
    case Port_D:
    	for(u8 i=0;i<8;i++){
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	8f 5f       	subi	r24, 0xFF	; 255
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	88 30       	cpi	r24, 0x08	; 8
    1d7c:	c8 f2       	brcs	.-78     	; 0x1d30 <NumberSSD+0x1a2>



    };

}
    1d7e:	6b 96       	adiw	r28, 0x1b	; 27
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <KPD_u8GetPressedKey>:
		{'8','9','10','11'},
		{'12','13','14','15'}
};


u8 KPD_u8GetPressedKey(){
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	6b 97       	sbiw	r28, 0x1b	; 27
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
	u8 pressedKey;
volatile u8 x=5;
    1da4:	85 e0       	ldi	r24, 0x05	; 5
    1da6:	8a 8b       	std	Y+18, r24	; 0x12
u8 Column_Arr[]={Pin_4,Pin_5,Pin_6,Pin_7};
    1da8:	84 e0       	ldi	r24, 0x04	; 4
    1daa:	8b 8b       	std	Y+19, r24	; 0x13
    1dac:	85 e0       	ldi	r24, 0x05	; 5
    1dae:	8c 8b       	std	Y+20, r24	; 0x14
    1db0:	86 e0       	ldi	r24, 0x06	; 6
    1db2:	8d 8b       	std	Y+21, r24	; 0x15
    1db4:	87 e0       	ldi	r24, 0x07	; 7
    1db6:	8e 8b       	std	Y+22, r24	; 0x16
u8 Row_Arr[]={Pin_0,Pin_1,Pin_2,Pin_3};
    1db8:	1f 8a       	std	Y+23, r1	; 0x17
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	88 8f       	std	Y+24, r24	; 0x18
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	89 8f       	std	Y+25, r24	; 0x19
    1dc2:	83 e0       	ldi	r24, 0x03	; 3
    1dc4:	8a 8f       	std	Y+26, r24	; 0x1a
for(u8 i=0;i<4;i++){
    1dc6:	18 8a       	std	Y+16, r1	; 0x10
    1dc8:	c4 c0       	rjmp	.+392    	; 0x1f52 <KPD_u8GetPressedKey+0x1c2>
	DIO_VidSetPinValue(KPD_COLUMN_PORT,Column_Arr[i],PinLow);
    1dca:	88 89       	ldd	r24, Y+16	; 0x10
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	43 96       	adiw	r24, 0x13	; 19
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	e2 0f       	add	r30, r18
    1dd8:	f3 1f       	adc	r31, r19
    1dda:	90 81       	ld	r25, Z
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	69 2f       	mov	r22, r25
    1de0:	41 e0       	ldi	r20, 0x01	; 1
    1de2:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
	for(u8 j=0;j<4;j++){
    1de6:	1f 86       	std	Y+15, r1	; 0x0f
    1de8:	9f c0       	rjmp	.+318    	; 0x1f28 <KPD_u8GetPressedKey+0x198>
    DIO_VidGetPinValue(KPD_ROW_PORT,Row_Arr[j],&x);
    1dea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	ce 01       	movw	r24, r28
    1df2:	47 96       	adiw	r24, 0x17	; 23
    1df4:	fc 01       	movw	r30, r24
    1df6:	e2 0f       	add	r30, r18
    1df8:	f3 1f       	adc	r31, r19
    1dfa:	90 81       	ld	r25, Z
    1dfc:	9e 01       	movw	r18, r28
    1dfe:	2e 5e       	subi	r18, 0xEE	; 238
    1e00:	3f 4f       	sbci	r19, 0xFF	; 255
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	69 2f       	mov	r22, r25
    1e06:	a9 01       	movw	r20, r18
    1e08:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_VidGetPinValue>
    if(x==0){
    1e0c:	8a 89       	ldd	r24, Y+18	; 0x12
    1e0e:	88 23       	and	r24, r24
    1e10:	09 f0       	breq	.+2      	; 0x1e14 <KPD_u8GetPressedKey+0x84>
    1e12:	87 c0       	rjmp	.+270    	; 0x1f22 <KPD_u8GetPressedKey+0x192>
    pressedKey=KPD_ARR[j][i];
    1e14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e16:	48 2f       	mov	r20, r24
    1e18:	50 e0       	ldi	r21, 0x00	; 0
    1e1a:	88 89       	ldd	r24, Y+16	; 0x10
    1e1c:	28 2f       	mov	r18, r24
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	ca 01       	movw	r24, r20
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	82 0f       	add	r24, r18
    1e2c:	93 1f       	adc	r25, r19
    1e2e:	fc 01       	movw	r30, r24
    1e30:	e6 58       	subi	r30, 0x86	; 134
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	80 81       	ld	r24, Z
    1e36:	89 8b       	std	Y+17, r24	; 0x11
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	a8 e4       	ldi	r26, 0x48	; 72
    1e3e:	b3 e4       	ldi	r27, 0x43	; 67
    1e40:	8b 87       	std	Y+11, r24	; 0x0b
    1e42:	9c 87       	std	Y+12, r25	; 0x0c
    1e44:	ad 87       	std	Y+13, r26	; 0x0d
    1e46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	4a ef       	ldi	r20, 0xFA	; 250
    1e56:	54 e4       	ldi	r21, 0x44	; 68
    1e58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	8f 83       	std	Y+7, r24	; 0x07
    1e62:	98 87       	std	Y+8, r25	; 0x08
    1e64:	a9 87       	std	Y+9, r26	; 0x09
    1e66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	40 e8       	ldi	r20, 0x80	; 128
    1e76:	5f e3       	ldi	r21, 0x3F	; 63
    1e78:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e7c:	88 23       	and	r24, r24
    1e7e:	2c f4       	brge	.+10     	; 0x1e8a <KPD_u8GetPressedKey+0xfa>
		__ticks = 1;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	9e 83       	std	Y+6, r25	; 0x06
    1e86:	8d 83       	std	Y+5, r24	; 0x05
    1e88:	3f c0       	rjmp	.+126    	; 0x1f08 <KPD_u8GetPressedKey+0x178>
	else if (__tmp > 65535)
    1e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8c:	78 85       	ldd	r23, Y+8	; 0x08
    1e8e:	89 85       	ldd	r24, Y+9	; 0x09
    1e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	3f ef       	ldi	r19, 0xFF	; 255
    1e96:	4f e7       	ldi	r20, 0x7F	; 127
    1e98:	57 e4       	ldi	r21, 0x47	; 71
    1e9a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e9e:	18 16       	cp	r1, r24
    1ea0:	4c f5       	brge	.+82     	; 0x1ef4 <KPD_u8GetPressedKey+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e2       	ldi	r20, 0x20	; 32
    1eb0:	51 e4       	ldi	r21, 0x41	; 65
    1eb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	bc 01       	movw	r22, r24
    1ebc:	cd 01       	movw	r24, r26
    1ebe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
    1eca:	0f c0       	rjmp	.+30     	; 0x1eea <KPD_u8GetPressedKey+0x15a>
    1ecc:	88 ec       	ldi	r24, 0xC8	; 200
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	9c 83       	std	Y+4, r25	; 0x04
    1ed2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <KPD_u8GetPressedKey+0x148>
    1edc:	9c 83       	std	Y+4, r25	; 0x04
    1ede:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee4:	01 97       	sbiw	r24, 0x01	; 1
    1ee6:	9e 83       	std	Y+6, r25	; 0x06
    1ee8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eea:	8d 81       	ldd	r24, Y+5	; 0x05
    1eec:	9e 81       	ldd	r25, Y+6	; 0x06
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	69 f7       	brne	.-38     	; 0x1ecc <KPD_u8GetPressedKey+0x13c>
    1ef2:	14 c0       	rjmp	.+40     	; 0x1f1c <KPD_u8GetPressedKey+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef6:	78 85       	ldd	r23, Y+8	; 0x08
    1ef8:	89 85       	ldd	r24, Y+9	; 0x09
    1efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	9e 83       	std	Y+6, r25	; 0x06
    1f06:	8d 83       	std	Y+5, r24	; 0x05
    1f08:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	9a 81       	ldd	r25, Y+2	; 0x02
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <KPD_u8GetPressedKey+0x184>
    1f18:	9a 83       	std	Y+2, r25	; 0x02
    1f1a:	89 83       	std	Y+1, r24	; 0x01
//while(x==0){
	//DIO_VidGetPinValue(KPD_ROW_PORT,Row_Arr[j],&x);
//}
_delay_ms(200);

return pressedKey;
    1f1c:	89 89       	ldd	r24, Y+17	; 0x11
    1f1e:	8b 8f       	std	Y+27, r24	; 0x1b
    1f20:	1e c0       	rjmp	.+60     	; 0x1f5e <KPD_u8GetPressedKey+0x1ce>
volatile u8 x=5;
u8 Column_Arr[]={Pin_4,Pin_5,Pin_6,Pin_7};
u8 Row_Arr[]={Pin_0,Pin_1,Pin_2,Pin_3};
for(u8 i=0;i<4;i++){
	DIO_VidSetPinValue(KPD_COLUMN_PORT,Column_Arr[i],PinLow);
	for(u8 j=0;j<4;j++){
    1f22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f24:	8f 5f       	subi	r24, 0xFF	; 255
    1f26:	8f 87       	std	Y+15, r24	; 0x0f
    1f28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f2a:	84 30       	cpi	r24, 0x04	; 4
    1f2c:	08 f4       	brcc	.+2      	; 0x1f30 <KPD_u8GetPressedKey+0x1a0>
    1f2e:	5d cf       	rjmp	.-326    	; 0x1dea <KPD_u8GetPressedKey+0x5a>
return pressedKey;


    }
	}
	DIO_VidSetPinValue(KPD_COLUMN_PORT,Column_Arr[i],PinHigh);
    1f30:	88 89       	ldd	r24, Y+16	; 0x10
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	ce 01       	movw	r24, r28
    1f38:	43 96       	adiw	r24, 0x13	; 19
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	e2 0f       	add	r30, r18
    1f3e:	f3 1f       	adc	r31, r19
    1f40:	90 81       	ld	r25, Z
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	69 2f       	mov	r22, r25
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
u8 KPD_u8GetPressedKey(){
	u8 pressedKey;
volatile u8 x=5;
u8 Column_Arr[]={Pin_4,Pin_5,Pin_6,Pin_7};
u8 Row_Arr[]={Pin_0,Pin_1,Pin_2,Pin_3};
for(u8 i=0;i<4;i++){
    1f4c:	88 89       	ldd	r24, Y+16	; 0x10
    1f4e:	8f 5f       	subi	r24, 0xFF	; 255
    1f50:	88 8b       	std	Y+16, r24	; 0x10
    1f52:	88 89       	ldd	r24, Y+16	; 0x10
    1f54:	84 30       	cpi	r24, 0x04	; 4
    1f56:	08 f4       	brcc	.+2      	; 0x1f5a <KPD_u8GetPressedKey+0x1ca>
    1f58:	38 cf       	rjmp	.-400    	; 0x1dca <KPD_u8GetPressedKey+0x3a>
	}
	DIO_VidSetPinValue(KPD_COLUMN_PORT,Column_Arr[i],PinHigh);


}
return 101;
    1f5a:	85 e6       	ldi	r24, 0x65	; 101
    1f5c:	8b 8f       	std	Y+27, r24	; 0x1b
    1f5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
}
    1f60:	6b 96       	adiw	r28, 0x1b	; 27
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <LCD_vidSendCmd>:
#include"DIO_int.h"
#include"LCD_config.h"
#include<util/delay.h>
#include "LCD_inti.h"
#include"LCD_private.h"
void LCD_vidSendCmd(u8 copy_u8Cmd){
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	2f 97       	sbiw	r28, 0x0f	; 15
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_VidSetPinValue(Control_port,RS_PIN,PinLow);//we will set the register select to zero to send command
    1f88:	83 e0       	ldi	r24, 0x03	; 3
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
    1f8c:	41 e0       	ldi	r20, 0x01	; 1
    1f8e:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(Control_port,RW_PIN,PinLow);//send zero to read/write pin to write
    1f92:	83 e0       	ldi	r24, 0x03	; 3
    1f94:	61 e0       	ldi	r22, 0x01	; 1
    1f96:	41 e0       	ldi	r20, 0x01	; 1
    1f98:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
    //DIO_VidSetPortDir(Data_port,Output); we will set the directions in the main
    DIO_VidSetPortValue(Data_port,copy_u8Cmd);//we will send the command on the D0-D7 pins
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fa0:	0e 94 c1 0a 	call	0x1582	; 0x1582 <DIO_VidSetPortValue>


    //the following section is to send a pules on the enable pin
    DIO_VidSetPinValue(Control_port,EN_PIN,PinHigh);
    1fa4:	83 e0       	ldi	r24, 0x03	; 3
    1fa6:	62 e0       	ldi	r22, 0x02	; 2
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a0 e4       	ldi	r26, 0x40	; 64
    1fb4:	b0 e4       	ldi	r27, 0x40	; 64
    1fb6:	8b 87       	std	Y+11, r24	; 0x0b
    1fb8:	9c 87       	std	Y+12, r25	; 0x0c
    1fba:	ad 87       	std	Y+13, r26	; 0x0d
    1fbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	4a ef       	ldi	r20, 0xFA	; 250
    1fcc:	54 e4       	ldi	r21, 0x44	; 68
    1fce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	8f 83       	std	Y+7, r24	; 0x07
    1fd8:	98 87       	std	Y+8, r25	; 0x08
    1fda:	a9 87       	std	Y+9, r26	; 0x09
    1fdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fde:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe0:	78 85       	ldd	r23, Y+8	; 0x08
    1fe2:	89 85       	ldd	r24, Y+9	; 0x09
    1fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e8       	ldi	r20, 0x80	; 128
    1fec:	5f e3       	ldi	r21, 0x3F	; 63
    1fee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ff2:	88 23       	and	r24, r24
    1ff4:	2c f4       	brge	.+10     	; 0x2000 <LCD_vidSendCmd+0x8e>
		__ticks = 1;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
    1ffe:	3f c0       	rjmp	.+126    	; 0x207e <LCD_vidSendCmd+0x10c>
	else if (__tmp > 65535)
    2000:	6f 81       	ldd	r22, Y+7	; 0x07
    2002:	78 85       	ldd	r23, Y+8	; 0x08
    2004:	89 85       	ldd	r24, Y+9	; 0x09
    2006:	9a 85       	ldd	r25, Y+10	; 0x0a
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	3f ef       	ldi	r19, 0xFF	; 255
    200c:	4f e7       	ldi	r20, 0x7F	; 127
    200e:	57 e4       	ldi	r21, 0x47	; 71
    2010:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2014:	18 16       	cp	r1, r24
    2016:	4c f5       	brge	.+82     	; 0x206a <LCD_vidSendCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2018:	6b 85       	ldd	r22, Y+11	; 0x0b
    201a:	7c 85       	ldd	r23, Y+12	; 0x0c
    201c:	8d 85       	ldd	r24, Y+13	; 0x0d
    201e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e2       	ldi	r20, 0x20	; 32
    2026:	51 e4       	ldi	r21, 0x41	; 65
    2028:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	bc 01       	movw	r22, r24
    2032:	cd 01       	movw	r24, r26
    2034:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9e 83       	std	Y+6, r25	; 0x06
    203e:	8d 83       	std	Y+5, r24	; 0x05
    2040:	0f c0       	rjmp	.+30     	; 0x2060 <LCD_vidSendCmd+0xee>
    2042:	88 ec       	ldi	r24, 0xC8	; 200
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	9c 83       	std	Y+4, r25	; 0x04
    2048:	8b 83       	std	Y+3, r24	; 0x03
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	9c 81       	ldd	r25, Y+4	; 0x04
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	f1 f7       	brne	.-4      	; 0x204e <LCD_vidSendCmd+0xdc>
    2052:	9c 83       	std	Y+4, r25	; 0x04
    2054:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2056:	8d 81       	ldd	r24, Y+5	; 0x05
    2058:	9e 81       	ldd	r25, Y+6	; 0x06
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	9e 83       	std	Y+6, r25	; 0x06
    205e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	9e 81       	ldd	r25, Y+6	; 0x06
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	69 f7       	brne	.-38     	; 0x2042 <LCD_vidSendCmd+0xd0>
    2068:	14 c0       	rjmp	.+40     	; 0x2092 <LCD_vidSendCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206a:	6f 81       	ldd	r22, Y+7	; 0x07
    206c:	78 85       	ldd	r23, Y+8	; 0x08
    206e:	89 85       	ldd	r24, Y+9	; 0x09
    2070:	9a 85       	ldd	r25, Y+10	; 0x0a
    2072:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
    207e:	8d 81       	ldd	r24, Y+5	; 0x05
    2080:	9e 81       	ldd	r25, Y+6	; 0x06
    2082:	9a 83       	std	Y+2, r25	; 0x02
    2084:	89 83       	std	Y+1, r24	; 0x01
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	9a 81       	ldd	r25, Y+2	; 0x02
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <LCD_vidSendCmd+0x118>
    208e:	9a 83       	std	Y+2, r25	; 0x02
    2090:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(3);
    DIO_VidSetPinValue(Control_port,EN_PIN,PinLow);
    2092:	83 e0       	ldi	r24, 0x03	; 3
    2094:	62 e0       	ldi	r22, 0x02	; 2
    2096:	41 e0       	ldi	r20, 0x01	; 1
    2098:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
	//
	
};
    209c:	2f 96       	adiw	r28, 0x0f	; 15
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <LCD_vidSendData>:
void LCD_vidSendData(u8 copy_u8Data){
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	2f 97       	sbiw	r28, 0x0f	; 15
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
    20c2:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_VidSetPinValue(Control_port,RS_PIN,PinHigh);
    20c4:	83 e0       	ldi	r24, 0x03	; 3
    20c6:	60 e0       	ldi	r22, 0x00	; 0
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(Control_port,RW_PIN,PinLow);
    20ce:	83 e0       	ldi	r24, 0x03	; 3
    20d0:	61 e0       	ldi	r22, 0x01	; 1
    20d2:	41 e0       	ldi	r20, 0x01	; 1
    20d4:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
    //DIO_VidSetPortDir(Data_port,Output); we will set the directions in the main
    DIO_VidSetPortValue(Data_port,copy_u8Data);
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	6f 85       	ldd	r22, Y+15	; 0x0f
    20dc:	0e 94 c1 0a 	call	0x1582	; 0x1582 <DIO_VidSetPortValue>



    DIO_VidSetPinValue(Control_port,EN_PIN,PinHigh);
    20e0:	83 e0       	ldi	r24, 0x03	; 3
    20e2:	62 e0       	ldi	r22, 0x02	; 2
    20e4:	40 e0       	ldi	r20, 0x00	; 0
    20e6:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	a0 e4       	ldi	r26, 0x40	; 64
    20f0:	b0 e4       	ldi	r27, 0x40	; 64
    20f2:	8b 87       	std	Y+11, r24	; 0x0b
    20f4:	9c 87       	std	Y+12, r25	; 0x0c
    20f6:	ad 87       	std	Y+13, r26	; 0x0d
    20f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    20fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2100:	9e 85       	ldd	r25, Y+14	; 0x0e
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	4a ef       	ldi	r20, 0xFA	; 250
    2108:	54 e4       	ldi	r21, 0x44	; 68
    210a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	8f 83       	std	Y+7, r24	; 0x07
    2114:	98 87       	std	Y+8, r25	; 0x08
    2116:	a9 87       	std	Y+9, r26	; 0x09
    2118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    211a:	6f 81       	ldd	r22, Y+7	; 0x07
    211c:	78 85       	ldd	r23, Y+8	; 0x08
    211e:	89 85       	ldd	r24, Y+9	; 0x09
    2120:	9a 85       	ldd	r25, Y+10	; 0x0a
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e8       	ldi	r20, 0x80	; 128
    2128:	5f e3       	ldi	r21, 0x3F	; 63
    212a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    212e:	88 23       	and	r24, r24
    2130:	2c f4       	brge	.+10     	; 0x213c <LCD_vidSendData+0x8e>
		__ticks = 1;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	9e 83       	std	Y+6, r25	; 0x06
    2138:	8d 83       	std	Y+5, r24	; 0x05
    213a:	3f c0       	rjmp	.+126    	; 0x21ba <LCD_vidSendData+0x10c>
	else if (__tmp > 65535)
    213c:	6f 81       	ldd	r22, Y+7	; 0x07
    213e:	78 85       	ldd	r23, Y+8	; 0x08
    2140:	89 85       	ldd	r24, Y+9	; 0x09
    2142:	9a 85       	ldd	r25, Y+10	; 0x0a
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	3f ef       	ldi	r19, 0xFF	; 255
    2148:	4f e7       	ldi	r20, 0x7F	; 127
    214a:	57 e4       	ldi	r21, 0x47	; 71
    214c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2150:	18 16       	cp	r1, r24
    2152:	4c f5       	brge	.+82     	; 0x21a6 <LCD_vidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2154:	6b 85       	ldd	r22, Y+11	; 0x0b
    2156:	7c 85       	ldd	r23, Y+12	; 0x0c
    2158:	8d 85       	ldd	r24, Y+13	; 0x0d
    215a:	9e 85       	ldd	r25, Y+14	; 0x0e
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e2       	ldi	r20, 0x20	; 32
    2162:	51 e4       	ldi	r21, 0x41	; 65
    2164:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	bc 01       	movw	r22, r24
    216e:	cd 01       	movw	r24, r26
    2170:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9e 83       	std	Y+6, r25	; 0x06
    217a:	8d 83       	std	Y+5, r24	; 0x05
    217c:	0f c0       	rjmp	.+30     	; 0x219c <LCD_vidSendData+0xee>
    217e:	88 ec       	ldi	r24, 0xC8	; 200
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	9c 83       	std	Y+4, r25	; 0x04
    2184:	8b 83       	std	Y+3, r24	; 0x03
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	9c 81       	ldd	r25, Y+4	; 0x04
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <LCD_vidSendData+0xdc>
    218e:	9c 83       	std	Y+4, r25	; 0x04
    2190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2192:	8d 81       	ldd	r24, Y+5	; 0x05
    2194:	9e 81       	ldd	r25, Y+6	; 0x06
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	9e 83       	std	Y+6, r25	; 0x06
    219a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	9e 81       	ldd	r25, Y+6	; 0x06
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	69 f7       	brne	.-38     	; 0x217e <LCD_vidSendData+0xd0>
    21a4:	14 c0       	rjmp	.+40     	; 0x21ce <LCD_vidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a6:	6f 81       	ldd	r22, Y+7	; 0x07
    21a8:	78 85       	ldd	r23, Y+8	; 0x08
    21aa:	89 85       	ldd	r24, Y+9	; 0x09
    21ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9e 83       	std	Y+6, r25	; 0x06
    21b8:	8d 83       	std	Y+5, r24	; 0x05
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	9e 81       	ldd	r25, Y+6	; 0x06
    21be:	9a 83       	std	Y+2, r25	; 0x02
    21c0:	89 83       	std	Y+1, r24	; 0x01
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	9a 81       	ldd	r25, Y+2	; 0x02
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <LCD_vidSendData+0x118>
    21ca:	9a 83       	std	Y+2, r25	; 0x02
    21cc:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(3);
    DIO_VidSetPinValue(Control_port,EN_PIN,PinLow);
    21ce:	83 e0       	ldi	r24, 0x03	; 3
    21d0:	62 e0       	ldi	r22, 0x02	; 2
    21d2:	41 e0       	ldi	r20, 0x01	; 1
    21d4:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>


};
    21d8:	2f 96       	adiw	r28, 0x0f	; 15
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	cf 91       	pop	r28
    21e6:	df 91       	pop	r29
    21e8:	08 95       	ret

000021ea <LCD_Clear>:


void LCD_Clear(){
    21ea:	df 93       	push	r29
    21ec:	cf 93       	push	r28
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
	LCD_vidSendCmd(1);
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_vidSendCmd>
}
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <LCD_vidInti>:



void LCD_vidInti(){
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	2e 97       	sbiw	r28, 0x0e	; 14
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	cd bf       	out	0x3d, r28	; 61
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	a0 e2       	ldi	r26, 0x20	; 32
    2218:	b2 e4       	ldi	r27, 0x42	; 66
    221a:	8b 87       	std	Y+11, r24	; 0x0b
    221c:	9c 87       	std	Y+12, r25	; 0x0c
    221e:	ad 87       	std	Y+13, r26	; 0x0d
    2220:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2222:	6b 85       	ldd	r22, Y+11	; 0x0b
    2224:	7c 85       	ldd	r23, Y+12	; 0x0c
    2226:	8d 85       	ldd	r24, Y+13	; 0x0d
    2228:	9e 85       	ldd	r25, Y+14	; 0x0e
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	4a ef       	ldi	r20, 0xFA	; 250
    2230:	54 e4       	ldi	r21, 0x44	; 68
    2232:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	8f 83       	std	Y+7, r24	; 0x07
    223c:	98 87       	std	Y+8, r25	; 0x08
    223e:	a9 87       	std	Y+9, r26	; 0x09
    2240:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2242:	6f 81       	ldd	r22, Y+7	; 0x07
    2244:	78 85       	ldd	r23, Y+8	; 0x08
    2246:	89 85       	ldd	r24, Y+9	; 0x09
    2248:	9a 85       	ldd	r25, Y+10	; 0x0a
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e8       	ldi	r20, 0x80	; 128
    2250:	5f e3       	ldi	r21, 0x3F	; 63
    2252:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2256:	88 23       	and	r24, r24
    2258:	2c f4       	brge	.+10     	; 0x2264 <LCD_vidInti+0x66>
		__ticks = 1;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	9e 83       	std	Y+6, r25	; 0x06
    2260:	8d 83       	std	Y+5, r24	; 0x05
    2262:	3f c0       	rjmp	.+126    	; 0x22e2 <LCD_vidInti+0xe4>
	else if (__tmp > 65535)
    2264:	6f 81       	ldd	r22, Y+7	; 0x07
    2266:	78 85       	ldd	r23, Y+8	; 0x08
    2268:	89 85       	ldd	r24, Y+9	; 0x09
    226a:	9a 85       	ldd	r25, Y+10	; 0x0a
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	3f ef       	ldi	r19, 0xFF	; 255
    2270:	4f e7       	ldi	r20, 0x7F	; 127
    2272:	57 e4       	ldi	r21, 0x47	; 71
    2274:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2278:	18 16       	cp	r1, r24
    227a:	4c f5       	brge	.+82     	; 0x22ce <LCD_vidInti+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227c:	6b 85       	ldd	r22, Y+11	; 0x0b
    227e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2280:	8d 85       	ldd	r24, Y+13	; 0x0d
    2282:	9e 85       	ldd	r25, Y+14	; 0x0e
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e2       	ldi	r20, 0x20	; 32
    228a:	51 e4       	ldi	r21, 0x41	; 65
    228c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	bc 01       	movw	r22, r24
    2296:	cd 01       	movw	r24, r26
    2298:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	9e 83       	std	Y+6, r25	; 0x06
    22a2:	8d 83       	std	Y+5, r24	; 0x05
    22a4:	0f c0       	rjmp	.+30     	; 0x22c4 <LCD_vidInti+0xc6>
    22a6:	88 ec       	ldi	r24, 0xC8	; 200
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	9c 83       	std	Y+4, r25	; 0x04
    22ac:	8b 83       	std	Y+3, r24	; 0x03
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	9c 81       	ldd	r25, Y+4	; 0x04
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <LCD_vidInti+0xb4>
    22b6:	9c 83       	std	Y+4, r25	; 0x04
    22b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ba:	8d 81       	ldd	r24, Y+5	; 0x05
    22bc:	9e 81       	ldd	r25, Y+6	; 0x06
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	9e 83       	std	Y+6, r25	; 0x06
    22c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	9e 81       	ldd	r25, Y+6	; 0x06
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	69 f7       	brne	.-38     	; 0x22a6 <LCD_vidInti+0xa8>
    22cc:	14 c0       	rjmp	.+40     	; 0x22f6 <LCD_vidInti+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ce:	6f 81       	ldd	r22, Y+7	; 0x07
    22d0:	78 85       	ldd	r23, Y+8	; 0x08
    22d2:	89 85       	ldd	r24, Y+9	; 0x09
    22d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	9e 83       	std	Y+6, r25	; 0x06
    22e0:	8d 83       	std	Y+5, r24	; 0x05
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
    22e4:	9e 81       	ldd	r25, Y+6	; 0x06
    22e6:	9a 83       	std	Y+2, r25	; 0x02
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	9a 81       	ldd	r25, Y+2	; 0x02
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <LCD_vidInti+0xf0>
    22f2:	9a 83       	std	Y+2, r25	; 0x02
    22f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	LCD_vidSendCmd(0b00111111);
    22f6:	8f e3       	ldi	r24, 0x3F	; 63
    22f8:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_vidSendCmd>
	//_delay_ms(1);
	LCD_vidSendCmd(0b00001100);
    22fc:	8c e0       	ldi	r24, 0x0C	; 12
    22fe:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_vidSendCmd>
	//_delay_ms(2);
	LCD_vidSendCmd(1);
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_vidSendCmd>
	 //_delay_ms(2);
	//LCD_vidSendCmd(0b00000011);
}
    2308:	2e 96       	adiw	r28, 0x0e	; 14
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	de bf       	out	0x3e, r29	; 62
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	cd bf       	out	0x3d, r28	; 61
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	08 95       	ret

0000231a <LCD_vidGotoXY>:
void LCD_vidGotoXY(u8 copy_u8Xpos,u8 copy_u8Ypos){
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	00 d0       	rcall	.+0      	; 0x2320 <LCD_vidGotoXY+0x6>
    2320:	0f 92       	push	r0
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    2326:	8a 83       	std	Y+2, r24	; 0x02
    2328:	6b 83       	std	Y+3, r22	; 0x03
u8 loc_u8Address=copy_u8Ypos;
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	89 83       	std	Y+1, r24	; 0x01
if(copy_u8Xpos==1){
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	81 30       	cpi	r24, 0x01	; 1
    2332:	19 f4       	brne	.+6      	; 0x233a <LCD_vidGotoXY+0x20>
	loc_u8Address=loc_u8Address+0x40;
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	80 5c       	subi	r24, 0xC0	; 192
    2338:	89 83       	std	Y+1, r24	; 0x01
/*  x=0 |  00x00  | 00x01    |       |-->
 *  x=1 |  00x40  | 00x41    |       |-->
 **/


LCD_vidSendCmd(loc_u8Address+DDRAM_ADDRESS);//this will make the DDRAM addresss change to the point we want to draw at in the lcd
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	80 58       	subi	r24, 0x80	; 128
    233e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_vidSendCmd>

}
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <LCD_vidSendSpecialChar>:


void LCD_vidSendSpecialChar(u8*Pattern,u8 Copy_u8Loc,u8 copy_u8Xpos,u8 copy_u8Ypos){
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	27 97       	sbiw	r28, 0x07	; 7
    2358:	0f b6       	in	r0, 0x3f	; 63
    235a:	f8 94       	cli
    235c:	de bf       	out	0x3e, r29	; 62
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	cd bf       	out	0x3d, r28	; 61
    2362:	9c 83       	std	Y+4, r25	; 0x04
    2364:	8b 83       	std	Y+3, r24	; 0x03
    2366:	6d 83       	std	Y+5, r22	; 0x05
    2368:	4e 83       	std	Y+6, r20	; 0x06
    236a:	2f 83       	std	Y+7, r18	; 0x07
u8 loc_CGRAM=Copy_u8Loc*8;
    236c:	8d 81       	ldd	r24, Y+5	; 0x05
    236e:	88 2f       	mov	r24, r24
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	88 0f       	add	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	88 0f       	add	r24, r24
    237c:	99 1f       	adc	r25, r25
    237e:	8a 83       	std	Y+2, r24	; 0x02
LCD_vidSendCmd(loc_CGRAM+64);//now we are in the CGRAM as we moved to its memory location
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	80 5c       	subi	r24, 0xC0	; 192
    2384:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_vidSendCmd>
for(u8 i=0;i<8;i++){
    2388:	19 82       	std	Y+1, r1	; 0x01
    238a:	0e c0       	rjmp	.+28     	; 0x23a8 <LCD_vidSendSpecialChar+0x5a>
LCD_vidSendData(Pattern[i]);
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	28 2f       	mov	r18, r24
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	fc 01       	movw	r30, r24
    2398:	e2 0f       	add	r30, r18
    239a:	f3 1f       	adc	r31, r19
    239c:	80 81       	ld	r24, Z
    239e:	0e 94 57 10 	call	0x20ae	; 0x20ae <LCD_vidSendData>


void LCD_vidSendSpecialChar(u8*Pattern,u8 Copy_u8Loc,u8 copy_u8Xpos,u8 copy_u8Ypos){
u8 loc_CGRAM=Copy_u8Loc*8;
LCD_vidSendCmd(loc_CGRAM+64);//now we are in the CGRAM as we moved to its memory location
for(u8 i=0;i<8;i++){
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	8f 5f       	subi	r24, 0xFF	; 255
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	88 30       	cpi	r24, 0x08	; 8
    23ac:	78 f3       	brcs	.-34     	; 0x238c <LCD_vidSendSpecialChar+0x3e>
LCD_vidSendData(Pattern[i]);
}
LCD_vidGotoXY(copy_u8Xpos,copy_u8Ypos);
    23ae:	8e 81       	ldd	r24, Y+6	; 0x06
    23b0:	6f 81       	ldd	r22, Y+7	; 0x07
    23b2:	0e 94 8d 11 	call	0x231a	; 0x231a <LCD_vidGotoXY>
LCD_vidSendData(Copy_u8Loc);
    23b6:	8d 81       	ldd	r24, Y+5	; 0x05
    23b8:	0e 94 57 10 	call	0x20ae	; 0x20ae <LCD_vidSendData>
}
    23bc:	27 96       	adiw	r28, 0x07	; 7
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	f8 94       	cli
    23c2:	de bf       	out	0x3e, r29	; 62
    23c4:	0f be       	out	0x3f, r0	; 63
    23c6:	cd bf       	out	0x3d, r28	; 61
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <LCD_vidSendInt>:

void LCD_vidSendInt(u32 num){
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	00 d0       	rcall	.+0      	; 0x23d4 <LCD_vidSendInt+0x6>
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
    23d8:	9a 83       	std	Y+2, r25	; 0x02
    23da:	89 83       	std	Y+1, r24	; 0x01
if(num!=0){
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	9a 81       	ldd	r25, Y+2	; 0x02
    23e0:	00 97       	sbiw	r24, 0x00	; 0
    23e2:	a1 f0       	breq	.+40     	; 0x240c <LCD_vidSendInt+0x3e>
LCD_vidSendInt(num/10);
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	9a 81       	ldd	r25, Y+2	; 0x02
    23e8:	2a e0       	ldi	r18, 0x0A	; 10
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	b9 01       	movw	r22, r18
    23ee:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodhi4>
    23f2:	cb 01       	movw	r24, r22
    23f4:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_vidSendInt>
LCD_vidSendData((num%10)+48);
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	9a 81       	ldd	r25, Y+2	; 0x02
    23fc:	2a e0       	ldi	r18, 0x0A	; 10
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	b9 01       	movw	r22, r18
    2402:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodhi4>
    2406:	80 5d       	subi	r24, 0xD0	; 208
    2408:	0e 94 57 10 	call	0x20ae	; 0x20ae <LCD_vidSendData>
}




}
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <LCD_vidSendString>:

void LCD_vidSendString(u8 *word,u8 copy_u8Xpos,u8 copy_u8Ypos){
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	00 d0       	rcall	.+0      	; 0x241c <LCD_vidSendString+0x6>
    241c:	00 d0       	rcall	.+0      	; 0x241e <LCD_vidSendString+0x8>
    241e:	0f 92       	push	r0
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	9b 83       	std	Y+3, r25	; 0x03
    2426:	8a 83       	std	Y+2, r24	; 0x02
    2428:	6c 83       	std	Y+4, r22	; 0x04
    242a:	4d 83       	std	Y+5, r20	; 0x05
	LCD_vidGotoXY(copy_u8Xpos,copy_u8Ypos);
    242c:	8c 81       	ldd	r24, Y+4	; 0x04
    242e:	6d 81       	ldd	r22, Y+5	; 0x05
    2430:	0e 94 8d 11 	call	0x231a	; 0x231a <LCD_vidGotoXY>
for(u8 i=0;word[i]!='\0';i++){
    2434:	19 82       	std	Y+1, r1	; 0x01
    2436:	0e c0       	rjmp	.+28     	; 0x2454 <LCD_vidSendString+0x3e>
LCD_vidSendData(word[i]);
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	28 2f       	mov	r18, r24
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	8a 81       	ldd	r24, Y+2	; 0x02
    2440:	9b 81       	ldd	r25, Y+3	; 0x03
    2442:	fc 01       	movw	r30, r24
    2444:	e2 0f       	add	r30, r18
    2446:	f3 1f       	adc	r31, r19
    2448:	80 81       	ld	r24, Z
    244a:	0e 94 57 10 	call	0x20ae	; 0x20ae <LCD_vidSendData>

}

void LCD_vidSendString(u8 *word,u8 copy_u8Xpos,u8 copy_u8Ypos){
	LCD_vidGotoXY(copy_u8Xpos,copy_u8Ypos);
for(u8 i=0;word[i]!='\0';i++){
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	8f 5f       	subi	r24, 0xFF	; 255
    2452:	89 83       	std	Y+1, r24	; 0x01
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	28 2f       	mov	r18, r24
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	8a 81       	ldd	r24, Y+2	; 0x02
    245c:	9b 81       	ldd	r25, Y+3	; 0x03
    245e:	fc 01       	movw	r30, r24
    2460:	e2 0f       	add	r30, r18
    2462:	f3 1f       	adc	r31, r19
    2464:	80 81       	ld	r24, Z
    2466:	88 23       	and	r24, r24
    2468:	39 f7       	brne	.-50     	; 0x2438 <LCD_vidSendString+0x22>
}




}
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <main>:
#include"LCD_inti.h"
#include"LCD_private.h"
#include<util/delay.h>


int main(){
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	e0 97       	sbiw	r28, 0x30	; 48
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	f8 94       	cli
    2488:	de bf       	out	0x3e, r29	; 62
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	cd bf       	out	0x3d, r28	; 61
u8 couter=0;
    248e:	1b 8a       	std	Y+19, r1	; 0x13
u8 x=1;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	8a 8b       	std	Y+18, r24	; 0x12
u8 y=2;
    2494:	82 e0       	ldi	r24, 0x02	; 2
    2496:	89 8b       	std	Y+17, r24	; 0x11
u8 obstucle_x=1;
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	88 8b       	std	Y+16, r24	; 0x10
u8 obstucle_y=15;
    249c:	8f e0       	ldi	r24, 0x0F	; 15
    249e:	8f 87       	std	Y+15, r24	; 0x0f
		0b10100,
		0b01110,
		0b00101,
		0b00100,
		0b01010
		};
    24a0:	9e 01       	movw	r18, r28
    24a2:	2c 5e       	subi	r18, 0xEC	; 236
    24a4:	3f 4f       	sbci	r19, 0xFF	; 255
    24a6:	38 a7       	std	Y+40, r19	; 0x28
    24a8:	2f a3       	std	Y+39, r18	; 0x27
    24aa:	8c e9       	ldi	r24, 0x9C	; 156
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	9a a7       	std	Y+42, r25	; 0x2a
    24b0:	89 a7       	std	Y+41, r24	; 0x29
    24b2:	98 e0       	ldi	r25, 0x08	; 8
    24b4:	9b a7       	std	Y+43, r25	; 0x2b
    24b6:	e9 a5       	ldd	r30, Y+41	; 0x29
    24b8:	fa a5       	ldd	r31, Y+42	; 0x2a
    24ba:	00 80       	ld	r0, Z
    24bc:	29 a5       	ldd	r18, Y+41	; 0x29
    24be:	3a a5       	ldd	r19, Y+42	; 0x2a
    24c0:	2f 5f       	subi	r18, 0xFF	; 255
    24c2:	3f 4f       	sbci	r19, 0xFF	; 255
    24c4:	3a a7       	std	Y+42, r19	; 0x2a
    24c6:	29 a7       	std	Y+41, r18	; 0x29
    24c8:	ef a1       	ldd	r30, Y+39	; 0x27
    24ca:	f8 a5       	ldd	r31, Y+40	; 0x28
    24cc:	00 82       	st	Z, r0
    24ce:	2f a1       	ldd	r18, Y+39	; 0x27
    24d0:	38 a5       	ldd	r19, Y+40	; 0x28
    24d2:	2f 5f       	subi	r18, 0xFF	; 255
    24d4:	3f 4f       	sbci	r19, 0xFF	; 255
    24d6:	38 a7       	std	Y+40, r19	; 0x28
    24d8:	2f a3       	std	Y+39, r18	; 0x27
    24da:	3b a5       	ldd	r19, Y+43	; 0x2b
    24dc:	31 50       	subi	r19, 0x01	; 1
    24de:	3b a7       	std	Y+43, r19	; 0x2b
    24e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    24e2:	88 23       	and	r24, r24
    24e4:	41 f7       	brne	.-48     	; 0x24b6 <main+0x3c>
0b01000,
0b00100,
0b01000,
0b00100,
0b01000
};
    24e6:	fe 01       	movw	r30, r28
    24e8:	7c 96       	adiw	r30, 0x1c	; 28
    24ea:	fd a7       	std	Y+45, r31	; 0x2d
    24ec:	ec a7       	std	Y+44, r30	; 0x2c
    24ee:	24 e9       	ldi	r18, 0x94	; 148
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	3f a7       	std	Y+47, r19	; 0x2f
    24f4:	2e a7       	std	Y+46, r18	; 0x2e
    24f6:	38 e0       	ldi	r19, 0x08	; 8
    24f8:	38 ab       	std	Y+48, r19	; 0x30
    24fa:	ee a5       	ldd	r30, Y+46	; 0x2e
    24fc:	ff a5       	ldd	r31, Y+47	; 0x2f
    24fe:	00 80       	ld	r0, Z
    2500:	2e a5       	ldd	r18, Y+46	; 0x2e
    2502:	3f a5       	ldd	r19, Y+47	; 0x2f
    2504:	2f 5f       	subi	r18, 0xFF	; 255
    2506:	3f 4f       	sbci	r19, 0xFF	; 255
    2508:	3f a7       	std	Y+47, r19	; 0x2f
    250a:	2e a7       	std	Y+46, r18	; 0x2e
    250c:	ec a5       	ldd	r30, Y+44	; 0x2c
    250e:	fd a5       	ldd	r31, Y+45	; 0x2d
    2510:	00 82       	st	Z, r0
    2512:	2c a5       	ldd	r18, Y+44	; 0x2c
    2514:	3d a5       	ldd	r19, Y+45	; 0x2d
    2516:	2f 5f       	subi	r18, 0xFF	; 255
    2518:	3f 4f       	sbci	r19, 0xFF	; 255
    251a:	3d a7       	std	Y+45, r19	; 0x2d
    251c:	2c a7       	std	Y+44, r18	; 0x2c
    251e:	38 a9       	ldd	r19, Y+48	; 0x30
    2520:	31 50       	subi	r19, 0x01	; 1
    2522:	38 ab       	std	Y+48, r19	; 0x30
    2524:	88 a9       	ldd	r24, Y+48	; 0x30
    2526:	88 23       	and	r24, r24
    2528:	41 f7       	brne	.-48     	; 0x24fa <main+0x80>

	//the first part of port A is the row
	DIO_VidSetPinDir(KPD_ROW_PORT,Pin_0,Input);
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	60 e0       	ldi	r22, 0x00	; 0
    252e:	40 e0       	ldi	r20, 0x00	; 0
    2530:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinDir>
	DIO_VidSetPinDir(KPD_ROW_PORT,Pin_1,Input);
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	61 e0       	ldi	r22, 0x01	; 1
    2538:	40 e0       	ldi	r20, 0x00	; 0
    253a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinDir>
	DIO_VidSetPinDir(KPD_ROW_PORT,Pin_2,Input);
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	62 e0       	ldi	r22, 0x02	; 2
    2542:	40 e0       	ldi	r20, 0x00	; 0
    2544:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinDir>
	DIO_VidSetPinDir(KPD_ROW_PORT,Pin_3,Input);
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	63 e0       	ldi	r22, 0x03	; 3
    254c:	40 e0       	ldi	r20, 0x00	; 0
    254e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinDir>

	DIO_VidSetPinValue(KPD_ROW_PORT,Pin_0,PinHigh);
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	60 e0       	ldi	r22, 0x00	; 0
    2556:	40 e0       	ldi	r20, 0x00	; 0
    2558:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_ROW_PORT,Pin_1,PinHigh);
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	61 e0       	ldi	r22, 0x01	; 1
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_ROW_PORT,Pin_2,PinHigh);
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	62 e0       	ldi	r22, 0x02	; 2
    256a:	40 e0       	ldi	r20, 0x00	; 0
    256c:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_ROW_PORT,Pin_3,PinHigh);
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	63 e0       	ldi	r22, 0x03	; 3
    2574:	40 e0       	ldi	r20, 0x00	; 0
    2576:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>

	//the second part of port A is the column

	DIO_VidSetPinDir(KPD_COLUMN_PORT,Pin_4,Output);
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	64 e0       	ldi	r22, 0x04	; 4
    257e:	41 e0       	ldi	r20, 0x01	; 1
    2580:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinDir>
	DIO_VidSetPinDir(KPD_COLUMN_PORT,Pin_5,Output);
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	65 e0       	ldi	r22, 0x05	; 5
    2588:	41 e0       	ldi	r20, 0x01	; 1
    258a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinDir>
	DIO_VidSetPinDir(KPD_COLUMN_PORT,Pin_6,Output);
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	66 e0       	ldi	r22, 0x06	; 6
    2592:	41 e0       	ldi	r20, 0x01	; 1
    2594:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinDir>
	DIO_VidSetPinDir(KPD_COLUMN_PORT,Pin_7,Output);
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	67 e0       	ldi	r22, 0x07	; 7
    259c:	41 e0       	ldi	r20, 0x01	; 1
    259e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinDir>

	DIO_VidSetPinValue(KPD_COLUMN_PORT,Pin_4,PinHigh);
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	64 e0       	ldi	r22, 0x04	; 4
    25a6:	40 e0       	ldi	r20, 0x00	; 0
    25a8:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_COLUMN_PORT,Pin_5,PinHigh);
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	65 e0       	ldi	r22, 0x05	; 5
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_COLUMN_PORT,Pin_6,PinHigh);
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	66 e0       	ldi	r22, 0x06	; 6
    25ba:	40 e0       	ldi	r20, 0x00	; 0
    25bc:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(KPD_COLUMN_PORT,Pin_7,PinHigh);
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	67 e0       	ldi	r22, 0x07	; 7
    25c4:	40 e0       	ldi	r20, 0x00	; 0
    25c6:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPinValue>

//intialize the LCD ports
	DIO_VidSetPortDir(Control_port,Output);
    25ca:	83 e0       	ldi	r24, 0x03	; 3
    25cc:	61 e0       	ldi	r22, 0x01	; 1
    25ce:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_VidSetPortDir>
		DIO_VidSetPortDir(Data_port,Output);
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	61 e0       	ldi	r22, 0x01	; 1
    25d6:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_VidSetPortDir>
		LCD_vidInti();
    25da:	0e 94 ff 10 	call	0x21fe	; 0x21fe <LCD_vidInti>
		volatile u8 z;
		LCD_vidSendSpecialChar(Hamoksha_run1,0,x,y);
    25de:	ce 01       	movw	r24, r28
    25e0:	44 96       	adiw	r24, 0x14	; 20
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	4a 89       	ldd	r20, Y+18	; 0x12
    25e6:	29 89       	ldd	r18, Y+17	; 0x11
    25e8:	0e 94 a7 11 	call	0x234e	; 0x234e <LCD_vidSendSpecialChar>
		LCD_vidSendSpecialChar(Obstcule_up,1,obstucle_x,obstucle_y);
    25ec:	ce 01       	movw	r24, r28
    25ee:	4c 96       	adiw	r24, 0x1c	; 28
    25f0:	61 e0       	ldi	r22, 0x01	; 1
    25f2:	48 89       	ldd	r20, Y+16	; 0x10
    25f4:	2f 85       	ldd	r18, Y+15	; 0x0f
    25f6:	0e 94 a7 11 	call	0x234e	; 0x234e <LCD_vidSendSpecialChar>
		while(1){
LCD_vidGotoXY(0,0);
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	60 e0       	ldi	r22, 0x00	; 0
    25fe:	0e 94 8d 11 	call	0x231a	; 0x231a <LCD_vidGotoXY>
LCD_vidSendData(couter+'0');
    2602:	8b 89       	ldd	r24, Y+19	; 0x13
    2604:	80 5d       	subi	r24, 0xD0	; 208
    2606:	0e 94 57 10 	call	0x20ae	; 0x20ae <LCD_vidSendData>
  z=KPD_u8GetPressedKey();
    260a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <KPD_u8GetPressedKey>
    260e:	8c a3       	std	Y+36, r24	; 0x24
switch(z){
    2610:	8c a1       	ldd	r24, Y+36	; 0x24
    2612:	e8 2f       	mov	r30, r24
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	fe a3       	std	Y+38, r31	; 0x26
    2618:	ed a3       	std	Y+37, r30	; 0x25
    261a:	2d a1       	ldd	r18, Y+37	; 0x25
    261c:	3e a1       	ldd	r19, Y+38	; 0x26
    261e:	24 33       	cpi	r18, 0x34	; 52
    2620:	31 05       	cpc	r19, r1
    2622:	b1 f1       	breq	.+108    	; 0x2690 <main+0x216>
    2624:	8d a1       	ldd	r24, Y+37	; 0x25
    2626:	9e a1       	ldd	r25, Y+38	; 0x26
    2628:	85 33       	cpi	r24, 0x35	; 53
    262a:	91 05       	cpc	r25, r1
    262c:	34 f4       	brge	.+12     	; 0x263a <main+0x1c0>
    262e:	ed a1       	ldd	r30, Y+37	; 0x25
    2630:	fe a1       	ldd	r31, Y+38	; 0x26
    2632:	e1 33       	cpi	r30, 0x31	; 49
    2634:	f1 05       	cpc	r31, r1
    2636:	e1 f1       	breq	.+120    	; 0x26b0 <main+0x236>
    2638:	4a c0       	rjmp	.+148    	; 0x26ce <main+0x254>
    263a:	2d a1       	ldd	r18, Y+37	; 0x25
    263c:	3e a1       	ldd	r19, Y+38	; 0x26
    263e:	25 33       	cpi	r18, 0x35	; 53
    2640:	31 05       	cpc	r19, r1
    2642:	31 f0       	breq	.+12     	; 0x2650 <main+0x1d6>
    2644:	8d a1       	ldd	r24, Y+37	; 0x25
    2646:	9e a1       	ldd	r25, Y+38	; 0x26
    2648:	86 33       	cpi	r24, 0x36	; 54
    264a:	91 05       	cpc	r25, r1
    264c:	89 f0       	breq	.+34     	; 0x2670 <main+0x1f6>
    264e:	3f c0       	rjmp	.+126    	; 0x26ce <main+0x254>
case '5':
	if(x==0){
    2650:	8a 89       	ldd	r24, Y+18	; 0x12
    2652:	88 23       	and	r24, r24
    2654:	e1 f5       	brne	.+120    	; 0x26ce <main+0x254>
     x=++x;
    2656:	8a 89       	ldd	r24, Y+18	; 0x12
    2658:	8f 5f       	subi	r24, 0xFF	; 255
    265a:	8a 8b       	std	Y+18, r24	; 0x12
     LCD_Clear();
    265c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <LCD_Clear>
     LCD_vidGotoXY(x,y);
    2660:	8a 89       	ldd	r24, Y+18	; 0x12
    2662:	69 89       	ldd	r22, Y+17	; 0x11
    2664:	0e 94 8d 11 	call	0x231a	; 0x231a <LCD_vidGotoXY>
     LCD_vidSendData(0);
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	0e 94 57 10 	call	0x20ae	; 0x20ae <LCD_vidSendData>
    266e:	2f c0       	rjmp	.+94     	; 0x26ce <main+0x254>
	}


	break;
case '6':
	if(y!=15){
    2670:	89 89       	ldd	r24, Y+17	; 0x11
    2672:	8f 30       	cpi	r24, 0x0F	; 15
    2674:	19 f0       	breq	.+6      	; 0x267c <main+0x202>
		     y=++y;
    2676:	89 89       	ldd	r24, Y+17	; 0x11
    2678:	8f 5f       	subi	r24, 0xFF	; 255
    267a:	89 8b       	std	Y+17, r24	; 0x11
			}
	LCD_Clear();
    267c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <LCD_Clear>
	LCD_vidGotoXY(x,y);
    2680:	8a 89       	ldd	r24, Y+18	; 0x12
    2682:	69 89       	ldd	r22, Y+17	; 0x11
    2684:	0e 94 8d 11 	call	0x231a	; 0x231a <LCD_vidGotoXY>
	LCD_vidSendData(0);
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	0e 94 57 10 	call	0x20ae	; 0x20ae <LCD_vidSendData>
    268e:	1f c0       	rjmp	.+62     	; 0x26ce <main+0x254>

	break;
case '4':
	if(y!=2){
    2690:	89 89       	ldd	r24, Y+17	; 0x11
    2692:	82 30       	cpi	r24, 0x02	; 2
    2694:	19 f0       	breq	.+6      	; 0x269c <main+0x222>
		     y=--y;
    2696:	89 89       	ldd	r24, Y+17	; 0x11
    2698:	81 50       	subi	r24, 0x01	; 1
    269a:	89 8b       	std	Y+17, r24	; 0x11
			}
	LCD_Clear();
    269c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <LCD_Clear>
	LCD_vidGotoXY(x,y);
    26a0:	8a 89       	ldd	r24, Y+18	; 0x12
    26a2:	69 89       	ldd	r22, Y+17	; 0x11
    26a4:	0e 94 8d 11 	call	0x231a	; 0x231a <LCD_vidGotoXY>
	LCD_vidSendData(0);
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	0e 94 57 10 	call	0x20ae	; 0x20ae <LCD_vidSendData>
    26ae:	0f c0       	rjmp	.+30     	; 0x26ce <main+0x254>

	break;

case '1':
	if(x==1){
    26b0:	8a 89       	ldd	r24, Y+18	; 0x12
    26b2:	81 30       	cpi	r24, 0x01	; 1
    26b4:	19 f4       	brne	.+6      	; 0x26bc <main+0x242>
	     x=--x;
    26b6:	8a 89       	ldd	r24, Y+18	; 0x12
    26b8:	81 50       	subi	r24, 0x01	; 1
    26ba:	8a 8b       	std	Y+18, r24	; 0x12

		}
	LCD_Clear();
    26bc:	0e 94 f5 10 	call	0x21ea	; 0x21ea <LCD_Clear>
	LCD_vidGotoXY(x,y);
    26c0:	8a 89       	ldd	r24, Y+18	; 0x12
    26c2:	69 89       	ldd	r22, Y+17	; 0x11
    26c4:	0e 94 8d 11 	call	0x231a	; 0x231a <LCD_vidGotoXY>
	LCD_vidSendData(0);
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	0e 94 57 10 	call	0x20ae	; 0x20ae <LCD_vidSendData>
	break;



}
LCD_vidGotoXY(obstucle_x,obstucle_y);
    26ce:	88 89       	ldd	r24, Y+16	; 0x10
    26d0:	6f 85       	ldd	r22, Y+15	; 0x0f
    26d2:	0e 94 8d 11 	call	0x231a	; 0x231a <LCD_vidGotoXY>
LCD_vidSendData(' ');
    26d6:	80 e2       	ldi	r24, 0x20	; 32
    26d8:	0e 94 57 10 	call	0x20ae	; 0x20ae <LCD_vidSendData>
obstucle_y=--obstucle_y;
    26dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26de:	81 50       	subi	r24, 0x01	; 1
    26e0:	8f 87       	std	Y+15, r24	; 0x0f
if(obstucle_y==1){
    26e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e4:	81 30       	cpi	r24, 0x01	; 1
    26e6:	61 f4       	brne	.+24     	; 0x2700 <main+0x286>
	couter=++couter;
    26e8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ea:	8f 5f       	subi	r24, 0xFF	; 255
    26ec:	8b 8b       	std	Y+19, r24	; 0x13
obstucle_y=15;
    26ee:	8f e0       	ldi	r24, 0x0F	; 15
    26f0:	8f 87       	std	Y+15, r24	; 0x0f
if(obstucle_x==0){
    26f2:	88 89       	ldd	r24, Y+16	; 0x10
    26f4:	88 23       	and	r24, r24
    26f6:	19 f4       	brne	.+6      	; 0x26fe <main+0x284>
	obstucle_x=1;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	88 8b       	std	Y+16, r24	; 0x10
    26fc:	01 c0       	rjmp	.+2      	; 0x2700 <main+0x286>
}else{
	obstucle_x=0;
    26fe:	18 8a       	std	Y+16, r1	; 0x10
}
}
LCD_vidGotoXY(obstucle_x,obstucle_y);
    2700:	88 89       	ldd	r24, Y+16	; 0x10
    2702:	6f 85       	ldd	r22, Y+15	; 0x0f
    2704:	0e 94 8d 11 	call	0x231a	; 0x231a <LCD_vidGotoXY>
LCD_vidSendData(1);
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	0e 94 57 10 	call	0x20ae	; 0x20ae <LCD_vidSendData>
if(couter==5){
    270e:	8b 89       	ldd	r24, Y+19	; 0x13
    2710:	85 30       	cpi	r24, 0x05	; 5
    2712:	09 f4       	brne	.+2      	; 0x2716 <main+0x29c>
    2714:	7c c0       	rjmp	.+248    	; 0x280e <main+0x394>
break;
}
if(obstucle_x==x&&obstucle_y==y){
    2716:	98 89       	ldd	r25, Y+16	; 0x10
    2718:	8a 89       	ldd	r24, Y+18	; 0x12
    271a:	98 17       	cp	r25, r24
    271c:	29 f4       	brne	.+10     	; 0x2728 <main+0x2ae>
    271e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2720:	89 89       	ldd	r24, Y+17	; 0x11
    2722:	98 17       	cp	r25, r24
    2724:	09 f4       	brne	.+2      	; 0x2728 <main+0x2ae>
    2726:	73 c0       	rjmp	.+230    	; 0x280e <main+0x394>
break;
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	a8 ec       	ldi	r26, 0xC8	; 200
    272e:	b2 e4       	ldi	r27, 0x42	; 66
    2730:	8b 87       	std	Y+11, r24	; 0x0b
    2732:	9c 87       	std	Y+12, r25	; 0x0c
    2734:	ad 87       	std	Y+13, r26	; 0x0d
    2736:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2738:	6b 85       	ldd	r22, Y+11	; 0x0b
    273a:	7c 85       	ldd	r23, Y+12	; 0x0c
    273c:	8d 85       	ldd	r24, Y+13	; 0x0d
    273e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	4a ef       	ldi	r20, 0xFA	; 250
    2746:	54 e4       	ldi	r21, 0x44	; 68
    2748:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	8f 83       	std	Y+7, r24	; 0x07
    2752:	98 87       	std	Y+8, r25	; 0x08
    2754:	a9 87       	std	Y+9, r26	; 0x09
    2756:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2758:	6f 81       	ldd	r22, Y+7	; 0x07
    275a:	78 85       	ldd	r23, Y+8	; 0x08
    275c:	89 85       	ldd	r24, Y+9	; 0x09
    275e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e8       	ldi	r20, 0x80	; 128
    2766:	5f e3       	ldi	r21, 0x3F	; 63
    2768:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    276c:	88 23       	and	r24, r24
    276e:	2c f4       	brge	.+10     	; 0x277a <main+0x300>
		__ticks = 1;
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	9e 83       	std	Y+6, r25	; 0x06
    2776:	8d 83       	std	Y+5, r24	; 0x05
    2778:	3f c0       	rjmp	.+126    	; 0x27f8 <main+0x37e>
	else if (__tmp > 65535)
    277a:	6f 81       	ldd	r22, Y+7	; 0x07
    277c:	78 85       	ldd	r23, Y+8	; 0x08
    277e:	89 85       	ldd	r24, Y+9	; 0x09
    2780:	9a 85       	ldd	r25, Y+10	; 0x0a
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	3f ef       	ldi	r19, 0xFF	; 255
    2786:	4f e7       	ldi	r20, 0x7F	; 127
    2788:	57 e4       	ldi	r21, 0x47	; 71
    278a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    278e:	18 16       	cp	r1, r24
    2790:	4c f5       	brge	.+82     	; 0x27e4 <main+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2792:	6b 85       	ldd	r22, Y+11	; 0x0b
    2794:	7c 85       	ldd	r23, Y+12	; 0x0c
    2796:	8d 85       	ldd	r24, Y+13	; 0x0d
    2798:	9e 85       	ldd	r25, Y+14	; 0x0e
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e2       	ldi	r20, 0x20	; 32
    27a0:	51 e4       	ldi	r21, 0x41	; 65
    27a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	bc 01       	movw	r22, r24
    27ac:	cd 01       	movw	r24, r26
    27ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	9e 83       	std	Y+6, r25	; 0x06
    27b8:	8d 83       	std	Y+5, r24	; 0x05
    27ba:	0f c0       	rjmp	.+30     	; 0x27da <main+0x360>
    27bc:	88 ec       	ldi	r24, 0xC8	; 200
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	9c 83       	std	Y+4, r25	; 0x04
    27c2:	8b 83       	std	Y+3, r24	; 0x03
    27c4:	8b 81       	ldd	r24, Y+3	; 0x03
    27c6:	9c 81       	ldd	r25, Y+4	; 0x04
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	f1 f7       	brne	.-4      	; 0x27c8 <main+0x34e>
    27cc:	9c 83       	std	Y+4, r25	; 0x04
    27ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d0:	8d 81       	ldd	r24, Y+5	; 0x05
    27d2:	9e 81       	ldd	r25, Y+6	; 0x06
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	9e 83       	std	Y+6, r25	; 0x06
    27d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27da:	8d 81       	ldd	r24, Y+5	; 0x05
    27dc:	9e 81       	ldd	r25, Y+6	; 0x06
    27de:	00 97       	sbiw	r24, 0x00	; 0
    27e0:	69 f7       	brne	.-38     	; 0x27bc <main+0x342>
    27e2:	0b cf       	rjmp	.-490    	; 0x25fa <main+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e4:	6f 81       	ldd	r22, Y+7	; 0x07
    27e6:	78 85       	ldd	r23, Y+8	; 0x08
    27e8:	89 85       	ldd	r24, Y+9	; 0x09
    27ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	9e 83       	std	Y+6, r25	; 0x06
    27f6:	8d 83       	std	Y+5, r24	; 0x05
    27f8:	8d 81       	ldd	r24, Y+5	; 0x05
    27fa:	9e 81       	ldd	r25, Y+6	; 0x06
    27fc:	9a 83       	std	Y+2, r25	; 0x02
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	9a 81       	ldd	r25, Y+2	; 0x02
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	f1 f7       	brne	.-4      	; 0x2804 <main+0x38a>
    2808:	9a 83       	std	Y+2, r25	; 0x02
    280a:	89 83       	std	Y+1, r24	; 0x01
    280c:	f6 ce       	rjmp	.-532    	; 0x25fa <main+0x180>
_delay_ms(100);



		}
if(couter==5){
    280e:	8b 89       	ldd	r24, Y+19	; 0x13
    2810:	85 30       	cpi	r24, 0x05	; 5
    2812:	79 f4       	brne	.+30     	; 0x2832 <main+0x3b8>
	LCD_Clear();
    2814:	0e 94 f5 10 	call	0x21ea	; 0x21ea <LCD_Clear>
	LCD_vidSendString("YOU",0,7);
    2818:	80 e6       	ldi	r24, 0x60	; 96
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	60 e0       	ldi	r22, 0x00	; 0
    281e:	47 e0       	ldi	r20, 0x07	; 7
    2820:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_vidSendString>
	LCD_vidSendString("WIN",1,7);
    2824:	84 e6       	ldi	r24, 0x64	; 100
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	61 e0       	ldi	r22, 0x01	; 1
    282a:	47 e0       	ldi	r20, 0x07	; 7
    282c:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_vidSendString>
    2830:	0e c0       	rjmp	.+28     	; 0x284e <main+0x3d4>
}else{
LCD_Clear();
    2832:	0e 94 f5 10 	call	0x21ea	; 0x21ea <LCD_Clear>
LCD_vidSendString("GAME",0,6);
    2836:	88 e6       	ldi	r24, 0x68	; 104
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	60 e0       	ldi	r22, 0x00	; 0
    283c:	46 e0       	ldi	r20, 0x06	; 6
    283e:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_vidSendString>
LCD_vidSendString("OVER",1,6);}
    2842:	8d e6       	ldi	r24, 0x6D	; 109
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	61 e0       	ldi	r22, 0x01	; 1
    2848:	46 e0       	ldi	r20, 0x06	; 6
    284a:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_vidSendString>
    284e:	ff cf       	rjmp	.-2      	; 0x284e <main+0x3d4>

00002850 <__udivmodhi4>:
    2850:	aa 1b       	sub	r26, r26
    2852:	bb 1b       	sub	r27, r27
    2854:	51 e1       	ldi	r21, 0x11	; 17
    2856:	07 c0       	rjmp	.+14     	; 0x2866 <__udivmodhi4_ep>

00002858 <__udivmodhi4_loop>:
    2858:	aa 1f       	adc	r26, r26
    285a:	bb 1f       	adc	r27, r27
    285c:	a6 17       	cp	r26, r22
    285e:	b7 07       	cpc	r27, r23
    2860:	10 f0       	brcs	.+4      	; 0x2866 <__udivmodhi4_ep>
    2862:	a6 1b       	sub	r26, r22
    2864:	b7 0b       	sbc	r27, r23

00002866 <__udivmodhi4_ep>:
    2866:	88 1f       	adc	r24, r24
    2868:	99 1f       	adc	r25, r25
    286a:	5a 95       	dec	r21
    286c:	a9 f7       	brne	.-22     	; 0x2858 <__udivmodhi4_loop>
    286e:	80 95       	com	r24
    2870:	90 95       	com	r25
    2872:	bc 01       	movw	r22, r24
    2874:	cd 01       	movw	r24, r26
    2876:	08 95       	ret

00002878 <__prologue_saves__>:
    2878:	2f 92       	push	r2
    287a:	3f 92       	push	r3
    287c:	4f 92       	push	r4
    287e:	5f 92       	push	r5
    2880:	6f 92       	push	r6
    2882:	7f 92       	push	r7
    2884:	8f 92       	push	r8
    2886:	9f 92       	push	r9
    2888:	af 92       	push	r10
    288a:	bf 92       	push	r11
    288c:	cf 92       	push	r12
    288e:	df 92       	push	r13
    2890:	ef 92       	push	r14
    2892:	ff 92       	push	r15
    2894:	0f 93       	push	r16
    2896:	1f 93       	push	r17
    2898:	cf 93       	push	r28
    289a:	df 93       	push	r29
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	ca 1b       	sub	r28, r26
    28a2:	db 0b       	sbc	r29, r27
    28a4:	0f b6       	in	r0, 0x3f	; 63
    28a6:	f8 94       	cli
    28a8:	de bf       	out	0x3e, r29	; 62
    28aa:	0f be       	out	0x3f, r0	; 63
    28ac:	cd bf       	out	0x3d, r28	; 61
    28ae:	09 94       	ijmp

000028b0 <__epilogue_restores__>:
    28b0:	2a 88       	ldd	r2, Y+18	; 0x12
    28b2:	39 88       	ldd	r3, Y+17	; 0x11
    28b4:	48 88       	ldd	r4, Y+16	; 0x10
    28b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    28b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    28ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    28bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    28be:	9b 84       	ldd	r9, Y+11	; 0x0b
    28c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    28c2:	b9 84       	ldd	r11, Y+9	; 0x09
    28c4:	c8 84       	ldd	r12, Y+8	; 0x08
    28c6:	df 80       	ldd	r13, Y+7	; 0x07
    28c8:	ee 80       	ldd	r14, Y+6	; 0x06
    28ca:	fd 80       	ldd	r15, Y+5	; 0x05
    28cc:	0c 81       	ldd	r16, Y+4	; 0x04
    28ce:	1b 81       	ldd	r17, Y+3	; 0x03
    28d0:	aa 81       	ldd	r26, Y+2	; 0x02
    28d2:	b9 81       	ldd	r27, Y+1	; 0x01
    28d4:	ce 0f       	add	r28, r30
    28d6:	d1 1d       	adc	r29, r1
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	de bf       	out	0x3e, r29	; 62
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	cd bf       	out	0x3d, r28	; 61
    28e2:	ed 01       	movw	r28, r26
    28e4:	08 95       	ret

000028e6 <_exit>:
    28e6:	f8 94       	cli

000028e8 <__stop_program>:
    28e8:	ff cf       	rjmp	.-2      	; 0x28e8 <__stop_program>
